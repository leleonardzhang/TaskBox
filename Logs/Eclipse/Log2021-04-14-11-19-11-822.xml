<Events startTimestamp="1618413551822" logVersion="1.0.0.202101171653">
  <Command __id="1" _type="MoveCaretCommand" caretOffset="2581" date="Wed Apr 14 11:19:12 EDT 2021" docOffset="2934" starttimestamp="1618413551822" timestamp="182" />
  <Command __id="2" _type="SelectTextCommand" caretOffset="2306" date="Wed Apr 14 11:21:21 EDT 2021" end="2306" start="1281" starttimestamp="1618413551822" timestamp="130176" />
  <Command __id="3" _type="MoveCaretCommand" caretOffset="2420" date="Wed Apr 14 11:21:22 EDT 2021" docOffset="2773" starttimestamp="1618413551822" timestamp="130417" />
  <Command __id="4" _type="MoveCaretCommand" caretOffset="2528" date="Wed Apr 14 11:21:22 EDT 2021" docOffset="2881" starttimestamp="1618413551822" timestamp="130980" />
  <Command __id="5" _type="SelectTextCommand" caretOffset="362" date="Wed Apr 14 11:21:24 EDT 2021" end="2524" start="362" starttimestamp="1618413551822" timestamp="132774" />
  <Command __id="6" _type="MoveCaretCommand" caretOffset="365" date="Wed Apr 14 11:21:24 EDT 2021" docOffset="718" starttimestamp="1618413551822" timestamp="132960" />
  <Command __id="7" _type="MoveCaretCommand" caretOffset="2200" date="Wed Apr 14 11:21:25 EDT 2021" docOffset="2553" starttimestamp="1618413551822" timestamp="133203" />
  <Command __id="8" _type="SelectTextCommand" caretOffset="2216" date="Wed Apr 14 11:21:25 EDT 2021" end="2216" start="2200" starttimestamp="1618413551822" timestamp="133255" />
  <Command __id="9" _type="MoveCaretCommand" caretOffset="1101" date="Wed Apr 14 11:21:26 EDT 2021" docOffset="1454" starttimestamp="1618413551822" timestamp="134285" />
  <Command __id="10" _type="ShellCommand" date="Wed Apr 14 11:21:39 EDT 2021" starttimestamp="1618413551822" timestamp="147442" type="ECLIPSE_MINIMIZED" />
  <Command __id="11" _type="ShellCommand" date="Wed Apr 14 11:21:39 EDT 2021" starttimestamp="1618413551822" timestamp="147446" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="12" _type="ShellCommand" date="Wed Apr 14 11:27:17 EDT 2021" starttimestamp="1618413551822" timestamp="485398" type="ECLIPSE_MAXIMIZED" />
  <Command __id="13" _type="ShellCommand" date="Wed Apr 14 11:27:17 EDT 2021" starttimestamp="1618413551822" timestamp="485415" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14" _type="SelectTextCommand" caretOffset="1756" date="Wed Apr 14 11:27:18 EDT 2021" end="1756" start="539" starttimestamp="1618413551822" timestamp="486863" />
  <Command __id="15" _type="MoveCaretCommand" caretOffset="2200" date="Wed Apr 14 11:27:18 EDT 2021" docOffset="2553" starttimestamp="1618413551822" timestamp="487089" />
  <Command __id="16" _type="SelectTextCommand" caretOffset="1526" date="Wed Apr 14 11:27:19 EDT 2021" end="2306" start="1526" starttimestamp="1618413551822" timestamp="487620" />
  <Command __id="17" _type="MoveCaretCommand" caretOffset="1529" date="Wed Apr 14 11:27:19 EDT 2021" docOffset="1882" starttimestamp="1618413551822" timestamp="487899" />
  <Command __id="18" _type="SelectTextCommand" caretOffset="2415" date="Wed Apr 14 11:27:20 EDT 2021" end="2415" start="1087" starttimestamp="1618413551822" timestamp="488361" />
  <Command __id="19" _type="MoveCaretCommand" caretOffset="2415" date="Wed Apr 14 11:27:20 EDT 2021" docOffset="2768" starttimestamp="1618413551822" timestamp="488578" />
  <Command __id="20" _type="SelectTextCommand" caretOffset="362" date="Wed Apr 14 11:27:22 EDT 2021" end="2524" start="362" starttimestamp="1618413551822" timestamp="490336" />
  <Command __id="21" _type="MoveCaretCommand" caretOffset="364" date="Wed Apr 14 11:27:22 EDT 2021" docOffset="717" starttimestamp="1618413551822" timestamp="490576" />
  <Command __id="22" _type="SelectTextCommand" caretOffset="2524" date="Wed Apr 14 11:27:23 EDT 2021" end="2524" start="363" starttimestamp="1618413551822" timestamp="491693" />
  <Command __id="23" _type="MoveCaretCommand" caretOffset="2524" date="Wed Apr 14 11:27:23 EDT 2021" docOffset="2877" starttimestamp="1618413551822" timestamp="491850" />
  <Command __id="24" _type="SelectTextCommand" caretOffset="323" date="Wed Apr 14 11:27:24 EDT 2021" end="2524" start="323" starttimestamp="1618413551822" timestamp="492971" />
  <Command __id="25" _type="MoveCaretCommand" caretOffset="1855" date="Wed Apr 14 11:27:29 EDT 2021" docOffset="2208" starttimestamp="1618413551822" timestamp="497423" />
  <Command __id="26" _type="SelectTextCommand" caretOffset="2528" date="Wed Apr 14 11:27:29 EDT 2021" end="2528" start="1623" starttimestamp="1618413551822" timestamp="498041" />
  <Command __id="27" _type="MoveCaretCommand" caretOffset="2528" date="Wed Apr 14 11:27:30 EDT 2021" docOffset="2881" starttimestamp="1618413551822" timestamp="498218" />
  <Command __id="28" _type="SelectTextCommand" caretOffset="1282" date="Wed Apr 14 11:27:30 EDT 2021" end="2417" start="1282" starttimestamp="1618413551822" timestamp="499027" />
  <Command __id="29" _type="MoveCaretCommand" caretOffset="1712" date="Wed Apr 14 11:27:31 EDT 2021" docOffset="2065" starttimestamp="1618413551822" timestamp="499277" />
  <Command __id="30" _type="SelectTextCommand" caretOffset="2524" date="Wed Apr 14 11:27:32 EDT 2021" end="2524" start="1269" starttimestamp="1618413551822" timestamp="500788" />
  <Command __id="31" _type="MoveCaretCommand" caretOffset="2524" date="Wed Apr 14 11:27:32 EDT 2021" docOffset="2877" starttimestamp="1618413551822" timestamp="500957" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Wed Apr 14 11:19:11 EDT 2021" docASTNodeCount="464" docActiveCodeLength="3644" docExpressionCount="344" docLength="3644" projectName="TaskBox" starttimestamp="1618413551822" timestamp="92">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\main\MathMain.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package main;

import java.util.Vector;
import javax.swing.text.JTextComponent;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.uiFrame;
import bus.uigen.attributes.AttributeNames;
import bus.uigen.oadapters.ClassAdapter;
import bus.uigen.oadapters.ObjectAdapter;
import components.caret.MathPanelCaretListener;
import components.mathEditor.MathEditorPanel;

public class MathMain {
	public static MathEditorPanel panel;
	public static OEFrame frame;
	
	public static void main(String[] args) {
		panel = new MathEditorPanel();
		frame = ObjectEditor.edit(panel);
		
		setCaretPositionListener();
		setButtonImage();
	}
	
	public static void setButtonImage() {
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "DotProduct", AttributeNames.ICON, "image/dot.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "CrossProduct", AttributeNames.ICON, "image/times.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Divide", AttributeNames.ICON, "image/div.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Neq", AttributeNames.ICON, "image/neq.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Ge", AttributeNames.ICON, "image/ge.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Le", AttributeNames.ICON, "image/le.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Approximate", AttributeNames.ICON, "image/approx.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Not", AttributeNames.ICON, "image/not.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Inf", AttributeNames.ICON, "image/inf.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Pm", AttributeNames.ICON, "image/pm.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Dot", AttributeNames.ICON, "image/dotx.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Ddot", AttributeNames.ICON, "image/ddotx.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "SuperScript", AttributeNames.ICON, "image/superscript.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "SubScript", AttributeNames.ICON, "image/subscript.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Fraction", AttributeNames.ICON, "image/fraction.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Sqrt", AttributeNames.ICON, "image/sqrt.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Floor", AttributeNames.ICON, "image/floor.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Ceil", AttributeNames.ICON, "image/ceil.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Integral", AttributeNames.ICON, "image/integral.png");
		ObjectEditor.setMethodAttribute(MathEditorPanel.class, "Sum", AttributeNames.ICON, "image/sum.png");
	}
	
	public static void setCaretPositionListener() {
		uiFrame aUIFrame = (uiFrame) frame;
		ClassAdapter adapter = (ClassAdapter) aUIFrame.getTopAdapter();
		Vector<ObjectAdapter> children = adapter.getChildrenVector();
		
		ObjectAdapter observableAdapter = null;
		
		for (ObjectAdapter child : children) {
			if (child.getComponentName().equals("mathExpression")) {
				observableAdapter = child;
				break;
			}
		}
		
		MathPanelCaretListener listener = new MathPanelCaretListener(panel);
		
		if (observableAdapter != null && (observableAdapter.getUIComponent().getPhysicalComponent()) instanceof JTextComponent) {
			((JTextComponent) observableAdapter.getUIComponent().getPhysicalComponent()).addCaretListener(listener);
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="34" _type="DiffBasedFileOpenCommand" date="Wed Apr 14 11:27:34 EDT 2021" docASTNodeCount="348" docActiveCodeLength="2432" docExpressionCount="210" docLength="2432" projectName="TaskBox" starttimestamp="1618413551822" timestamp="502940">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\mathEditor\MathExpressionImage.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package components.mathEditor;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import components.listenersupport.PropertyListenerSupport;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;


@StructurePattern(StructurePatternNames.IMAGE_PATTERN)
@PropertyNames({"x", "y", "width", "height", "imageFileName"})
@EditablePropertyNames({})
public class MathExpressionImage implements MathExpressionImageInterface{
	private PropertyListenerSupport propertyListenerSupport = new PropertyListenerSupport();
	private int x, y, height, width;
	private String imageFileName;

	public MathExpressionImage(int newX, int newY, int h, int w, String name) {
		setX(newX);
		setY(newY);
		setHeight(h);
		setWidth(w);
		setImageFileName(name);
	}
	
	@Override
    public void addPropertyChangeListener(PropertyChangeListener aListener) {
		propertyListenerSupport.addElement(aListener);    
    }

	@Override
	public int getX() {
		return x;
	}

	@Override
	public void setX(int newX) {
		int oldX = x;
		x = newX;
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "x", oldX, x));
	}

	@Override
	public int getY() {
		return y;
	}

	@Override
	public void setY(int newY) {
		int oldY = y;
		y = newY;
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "y", oldY, y));
	}

	@Override
	public int getWidth() {
		return width;
	}

	@Override
	public void setWidth(int newWidth) {
		int oldWidth = width;
		width = newWidth;
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "width", oldWidth, width));
	}

	@Override
	public int getHeight() {
		return height;
	}

	@Override
	public void setHeight(int newHeight) {
		int oldHeight = height;
		height = newHeight;
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "height", oldHeight, height));
	}

	@Override
	public String getImageFileName() {
		return imageFileName;
	}

	@Override
	public void setImageFileName(String newName) {
		String oldName = imageFileName;
		imageFileName = newName;
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "imageFileName", oldName, imageFileName));
	}
}
	
]]></snapshot>
  </Command>
  <Command __id="36" _type="DiffBasedFileOpenCommand" date="Wed Apr 14 11:27:35 EDT 2021" docASTNodeCount="513" docActiveCodeLength="2878" docExpressionCount="375" docLength="3985" projectName="TaskBox" starttimestamp="1618413551822" timestamp="503925">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\mathEditor\LatexExample.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[/*
 * Simple Java LaTex example
 * http://www.heatonresearch.com/
 * 
 * Copyright 2013 Heaton Research, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *   
 * For more information on Heaton Research copyrights, licenses 
 * and trademarks visit:
 * http://www.heatonresearch.com/copyright
 */

package components.mathEditor;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import org.scilab.forge.jlatexmath.TeXConstants;
import org.scilab.forge.jlatexmath.TeXFormula;
import org.scilab.forge.jlatexmath.TeXIcon;

public class LatexExample extends JFrame implements ActionListener {
	
	private JTextArea latexSource;
	private JButton btnRender;
	private JPanel drawingArea;

	public LatexExample() {
		this.setTitle("JLatexMath Example");
		this.setSize(500, 500);
		Container content = this.getContentPane();
		content.setLayout(new GridLayout(2, 1));
		this.latexSource = new JTextArea();
		
		JPanel editorArea = new JPanel();
		editorArea.setLayout(new BorderLayout());
		editorArea.add(new JScrollPane(this.latexSource),BorderLayout.CENTER);
		editorArea.add(btnRender = new JButton("Render"),BorderLayout.SOUTH);		
		
		content.add(editorArea);
		content.add(this.drawingArea = new JPanel());		
		this.btnRender.addActionListener(this);
		
		this.latexSource.setText("x=\\frac{-b \\pm \\sqrt {b^2-4ac}}{2a}");
	}

	public void render() {
		try {
			// get the text
			String latex = this.latexSource.getText();
			
			// create a formula
			TeXFormula formula = new TeXFormula(latex);
			
			
			// render the formla to an icon of the same size as the formula.
			TeXIcon icon = formula
					.createTeXIcon(TeXConstants.STYLE_DISPLAY, 20);
			
			// insert a border 
			icon.setInsets(new Insets(5, 5, 5, 5));

			// now create an actual image of the rendered equation
			BufferedImage image = new BufferedImage(icon.getIconWidth(),
					icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
			Graphics2D g2 = image.createGraphics();
			g2.setColor(Color.white);
			g2.fillRect(0, 0, icon.getIconWidth(), icon.getIconHeight());
			JLabel jl = new JLabel();
			jl.setForeground(new Color(0, 0, 0));
			icon.paintIcon(jl, g2, 0, 0);
			// at this point the image is created, you could also save it with ImageIO
			
			File outputfile = new File("image.png");
			ImageIO.write(image, "png", outputfile);
			
			// now draw it to the screen			
			Graphics g = this.drawingArea.getGraphics();
			g.drawImage(image,0,0,null);
		} catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error",
					JOptionPane.INFORMATION_MESSAGE);		
		}

	}

	public static void main(String[] args) {
		LatexExample frame = new LatexExample();		
		frame.setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if( e.getSource() == this.btnRender ) {
			render();
		}
		
	}
}
]]></snapshot>
  </Command>
  <Command __id="38" _type="DiffBasedFileOpenCommand" date="Wed Apr 14 11:27:36 EDT 2021" docASTNodeCount="967" docActiveCodeLength="5669" docExpressionCount="666" docLength="5669" projectName="TaskBox" starttimestamp="1618413551822" timestamp="504681">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\parser\TexTreeBuilder.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package parser;

import java.util.Vector;
import javax.swing.tree.DefaultMutableTreeNode;

public class TexTreeBuilder {
	private DefaultMutableTreeNode root;
	private JavaExpressionParser parser = new JavaExpressionParser();
	
	
	public String build(DefaultMutableTreeNode aRoot) {
		root = aRoot;
		String resultString = "";
		for (Character c : getTexVector(root)) {
			resultString += c;
		}
		return resultString;
	}
	
	public Vector<Character> getTexVector(DefaultMutableTreeNode thisNode) {
		Vector<Character> childrenVector = new Vector<Character> ();
		for (int i = 0; i < thisNode.getChildCount(); i ++) {
			DefaultMutableTreeNode child = (DefaultMutableTreeNode) thisNode.getChildAt(i);
			if (child.getChildCount() == 0) {
				if (((Vector<Character>) child.getUserObject()).get(0) == '/') {
					Vector<Character> fracVector = new Vector<Character> ();
					fracVector.add('\\');
					fracVector.add('f');
					fracVector.add('r');
					fracVector.add('a');
					fracVector.add('c');
					fracVector.add('{');
					fracVector = concat(fracVector, childrenVector);
					fracVector.add('}');
					fracVector.add('{');
					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 1);
					if (nextChild.getChildCount() == 0) {
						fracVector = concat(fracVector, ((Vector<Character>) nextChild.getUserObject()));
					}
					else {
						fracVector = concat(fracVector, getTexVector(nextChild));
					}
					fracVector.add('}');
					i ++;
					childrenVector = fracVector;
				}
				else if (((Vector<Character>) child.getUserObject()).get(0) == '^') {
					Vector<Character> powerVector = new Vector<Character> ();
					powerVector = concat(childrenVector, powerVector);
					powerVector.add('^');
					powerVector.add('{');
					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 1);
					if (nextChild.getChildCount() == 0) {
						powerVector = concat(powerVector, ((Vector<Character>) nextChild.getUserObject()));
					}
					else {
						powerVector = concat(powerVector, getTexVector(nextChild));
					}
					powerVector.add('}');
					i ++;
					childrenVector = powerVector;
				}
				else if (((Vector<Character>) child.getUserObject()).get(0) == '*') {
					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 1);
					DefaultMutableTreeNode prevChild = (DefaultMutableTreeNode) thisNode.getChildAt(i - 1);
					Vector<Character> timesVector = new Vector<Character> ();
					timesVector = concat(childrenVector, timesVector);
					if (prevChild.getChildCount() == 0 && nextChild.getChildCount() == 0 
							&& parser.isNumber((Vector<Character>) prevChild.getUserObject()) 
							&& parser.isUnsignedVariable((Vector<Character>) nextChild.getUserObject())) {
					}
					else {
						timesVector.add(' ');
						timesVector.add('\\');
						timesVector.add('t');
						timesVector.add('i');
						timesVector.add('m');
						timesVector.add('e');
						timesVector.add('s');
						timesVector.add(' ');
						childrenVector = timesVector;
					}
				}
				
				else if (isSqrt((Vector<Character>) child.getUserObject()) 
						&& parser.isExpression((Vector<Character>) ((DefaultMutableTreeNode) thisNode.getChildAt(i + 2)).getUserObject())) {
					Vector<Character> fracVector = new Vector<Character> ();
					fracVector.add('\\');
					fracVector.add('s');
					fracVector.add('q');
					fracVector.add('r');
					fracVector.add('t');
					fracVector.add('{');
					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 2);
					if (nextChild.getChildCount() == 0) {
						fracVector = concat(fracVector, ((Vector<Character>) nextChild.getUserObject()));
					}
					else {
						fracVector = concat(fracVector, getTexVector(nextChild));
					}
					fracVector.add('}');
					i += 3;
					childrenVector = fracVector;
				}
				
				else if (isExp((Vector<Character>) child.getUserObject())
						&& parser.isExpression((Vector<Character>) ((DefaultMutableTreeNode) thisNode.getChildAt(i + 2)).getUserObject())) {
					Vector<Character> fracVector = new Vector<Character> ();
					fracVector.add('e');
					fracVector.add('^');
					fracVector.add('{');
					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 2);
					if (nextChild.getChildCount() == 0) {
						fracVector = concat(fracVector, ((Vector<Character>) nextChild.getUserObject()));
					}
					else {
						fracVector = concat(fracVector, getTexVector(nextChild));
					}
					fracVector.add('}');
					i += 3;
					childrenVector = fracVector;
				}
				
				
				else {
					childrenVector = concat(childrenVector, (Vector<Character>) child.getUserObject());
				}
			}
			else {
				childrenVector = concat(childrenVector, getTexVector(child));
			}
		}
		return childrenVector;	
	}
	
	public Vector<Character> concat(Vector<Character> vectorA, Vector<Character> vectorB){
		Vector<Character> newVector = new Vector<Character> ();
		for (Character c : vectorA) {
			newVector.add(c);
		}
		for (Character c : vectorB) {
			newVector.add(c);
		}
		return newVector;
	}
	
	public boolean isSqrt(Vector<Character> aVector) {
		if (aVector.size() != 4) return false;
		return aVector.get(0) == 's' && aVector.get(1) == 'q' && aVector.get(2) == 'r' && aVector.get(3) == 't';
	}
	
	public boolean isExp(Vector<Character> aVector) {
		if (aVector.size() != 3) return false;
		return aVector.get(0) == 'e' && aVector.get(1) == 'x' && aVector.get(2) == 'p';
	}
	


}
]]></snapshot>
  </Command>
  <Command __id="40" _type="DiffBasedFileOpenCommand" date="Wed Apr 14 11:28:00 EDT 2021" docASTNodeCount="1036" docActiveCodeLength="6331" docExpressionCount="709" docLength="6331" projectName="TaskBox" starttimestamp="1618413551822" timestamp="528910">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\parser\JavaExpressionTreeParser.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package parser;

import java.util.Vector;

import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;

public class JavaExpressionTreeParser {
	private DefaultMutableTreeNode rootNode;
	private JTree tree;
	private JavaExpressionParser parser = new JavaExpressionParser();
	
	public JavaExpressionTreeParser(Vector<Character> aVector) {
		if (parser.isExpression(aVector)) {
			rootNode = new DefaultMutableTreeNode(aVector);
			tree = new JTree(rootNode);
			parse(rootNode);
		}
	}
	
	public void parse(DefaultMutableTreeNode thisNode) {
		Vector<Character> aVector = (Vector<Character>) thisNode.getUserObject();
		if (parser.isAtomicExpression(aVector)) {
			return;
		}
		
		if (parser.isAddSubExpression(aVector)) {
			int pt = 0;
			while (pt < aVector.size() && 
					(!parser.isAddOrSub(aVector.get(pt)) || !parser.isExpression(parser.truncate(aVector, 0, pt)) || !parser.isExpression(parser.truncate(aVector, pt + 1, aVector.size())))) {
				pt ++;
			}
			
			Vector<Character> vectorLeft = parser.truncate(aVector, 0, pt);
			DefaultMutableTreeNode childLeft = new DefaultMutableTreeNode(vectorLeft);
			
			Vector<Character> vectorMid = parser.truncate(aVector, pt, pt + 1);
			DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);
			
			Vector<Character> vectorRight = parser.truncate(aVector, pt + 1, aVector.size());
			DefaultMutableTreeNode childRight = new DefaultMutableTreeNode(vectorRight);
			
			thisNode.add(childLeft);
			parse(childLeft);
			thisNode.add(childMid);
			thisNode.add(childRight);
			parse(childRight);
			return;
		}
		
		if (parser.isMultiDivExpression(aVector)) {
			int pt = 0;
			while (pt < aVector.size() && 
					(!parser.isMultiOrDiv(aVector.get(pt)) || !parser.isExpression(parser.truncate(aVector, 0, pt)) || !parser.isExpression(parser.truncate(aVector, pt + 1, aVector.size())))) {
				pt ++;
			}
			
			Vector<Character> vectorLeft = parser.truncate(aVector, 0, pt);
			DefaultMutableTreeNode childLeft = new DefaultMutableTreeNode(vectorLeft);
			
			Vector<Character> vectorMid = parser.truncate(aVector, pt, pt + 1);
			DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);
			
			Vector<Character> vectorRight = parser.truncate(aVector, pt + 1, aVector.size());
			DefaultMutableTreeNode childRight = new DefaultMutableTreeNode(vectorRight);
			
			thisNode.add(childLeft);
			parse(childLeft);
			thisNode.add(childMid);
			thisNode.add(childRight);
			parse(childRight);
			return;
		}
		
		if (parser.isFunctionExpression(aVector)) {
			int pt = 0;
			while (!parser.isFunctionName(parser.truncate(aVector, 0, pt)) && pt < aVector.size()) {
				pt ++;
			}
			
			Vector<Character> vectorFunction = parser.truncate(aVector, 0, pt);
			DefaultMutableTreeNode childFunction = new DefaultMutableTreeNode(vectorFunction);
			
			Vector<Character> vectorLeft = parser.truncate(aVector, pt, pt + 1);
			DefaultMutableTreeNode childLeft = new DefaultMutableTreeNode(vectorLeft);
			
			Vector<Character> vectorMid = parser.truncate(aVector, pt + 1, aVector.size() - 1);
			DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);
			
			Vector<Character> vectorRight = parser.truncate(aVector, aVector.size() - 1, aVector.size());
			DefaultMutableTreeNode childRight = new DefaultMutableTreeNode(vectorRight);
			
			thisNode.add(childFunction);
			thisNode.add(childLeft);
			thisNode.add(childMid);
			parseParameters(childMid);
			thisNode.add(childRight);
			return;
		}
		
		if (parser.isExpExpression(aVector)) {
			int pt = 0;
			while (pt < aVector.size() && 
					(!parser.isCaret(aVector.get(pt)) || !parser.isExpression(parser.truncate(aVector, 0, pt)) || !parser.isExpression(parser.truncate(aVector, pt + 1, aVector.size())))) {
				pt ++;
			}
			
			
			Vector<Character> vectorLeft = parser.truncate(aVector, 0, pt);
			DefaultMutableTreeNode childLeft = new DefaultMutableTreeNode(vectorLeft);
			
			Vector<Character> vectorMid = parser.truncate(aVector, pt, pt + 1);
			DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);
			
			Vector<Character> vectorRight = parser.truncate(aVector, pt + 1, aVector.size());
			DefaultMutableTreeNode childRight = new DefaultMutableTreeNode(vectorRight);
			
			thisNode.add(childLeft);
			parse(childLeft);
			thisNode.add(childMid);
			thisNode.add(childRight);
			parse(childRight);
			return;
		}
		
		
		if (parser.isParenthesisExpression(aVector)) {
			Vector<Character> vectorLeft = new Vector<Character>();
			vectorLeft.add('(');
			
			Vector<Character> vectorMid = parser.truncateBoth(aVector);
			DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);
			
			Vector<Character> vectorRight = new Vector<Character>();
			vectorRight.add(')');
			
			thisNode.add(new DefaultMutableTreeNode(vectorLeft));
			thisNode.add(childMid);
			thisNode.add(new DefaultMutableTreeNode(vectorRight));
			parse(childMid);
			return;
		}
		
		
		
	}
	
	public void parseParameters(DefaultMutableTreeNode thisNode) {
		Vector<Character> aVector = (Vector<Character>) thisNode.getUserObject();
		if (parser.isExpression(aVector)) {
			parse(thisNode);
			return;
		}
		
		int pt = 0;
		while (pt < aVector.size() && 
				(!parser.isComma(aVector.get(pt)) || !parser.isExpression(parser.truncate(aVector, 0, pt)) || !parser.isParameters(parser.truncate(aVector, pt + 1, aVector.size())))) {
			pt ++;
		}
		
		Vector<Character> vectorLeft = parser.truncate(aVector, 0, pt);
		DefaultMutableTreeNode childLeft = new DefaultMutableTreeNode(vectorLeft);
		
		Vector<Character> vectorMid = parser.truncate(aVector, pt, pt + 1);
		DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);
		
		Vector<Character> vectorRight = parser.truncate(aVector, pt + 1, aVector.size());
		DefaultMutableTreeNode childRight = new DefaultMutableTreeNode(vectorRight);
		
		thisNode.add(childLeft);
		parse(childLeft);
		thisNode.add(childMid);
		thisNode.add(childRight);
		parseParameters(childRight);
		return;
		
	}
	
	public JTree getTree() {
		return tree;
	}
	
	public DefaultMutableTreeNode getRoot() {
		return rootNode;
	}
}
]]></snapshot>
  </Command>
  <Command __id="32" _type="SelectTextCommand" caretOffset="326" date="Wed Apr 14 11:27:33 EDT 2021" end="2528" start="326" starttimestamp="1618413551822" timestamp="502021" />
  <Command __id="33" _type="MoveCaretCommand" caretOffset="529" date="Wed Apr 14 11:27:34 EDT 2021" docOffset="882" starttimestamp="1618413551822" timestamp="502221" />
  <Command __id="35" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 14 11:27:34 EDT 2021" docOffset="0" starttimestamp="1618413551822" timestamp="503010" />
  <Command __id="37" _type="MoveCaretCommand" caretOffset="4" date="Wed Apr 14 11:27:35 EDT 2021" docOffset="4" starttimestamp="1618413551822" timestamp="504054" />
  <Command __id="39" _type="MoveCaretCommand" caretOffset="325" date="Wed Apr 14 11:27:36 EDT 2021" docOffset="374" starttimestamp="1618413551822" timestamp="504769" />
  <Command __id="41" _type="MoveCaretCommand" caretOffset="5436" date="Wed Apr 14 11:28:00 EDT 2021" docOffset="5514" starttimestamp="1618413551822" timestamp="529039" />
  <Command __id="43" _type="MoveCaretCommand" caretOffset="252" date="Wed Apr 14 11:28:10 EDT 2021" docOffset="356" starttimestamp="1618413551822" timestamp="538757" />
  <Command __id="44" _type="SelectTextCommand" caretOffset="256" date="Wed Apr 14 11:28:13 EDT 2021" end="398" start="256" starttimestamp="1618413551822" timestamp="542077" />
  <Command __id="45" _type="MoveCaretCommand" caretOffset="256" date="Wed Apr 14 11:28:14 EDT 2021" docOffset="360" starttimestamp="1618413551822" timestamp="542423" />
  <Command __id="46" _type="SelectTextCommand" caretOffset="398" date="Wed Apr 14 11:28:15 EDT 2021" end="398" start="256" starttimestamp="1618413551822" timestamp="543691" />
  <Command __id="47" _type="MoveCaretCommand" caretOffset="398" date="Wed Apr 14 11:28:15 EDT 2021" docOffset="502" starttimestamp="1618413551822" timestamp="543825" />
  <Command __id="48" _type="SelectTextCommand" caretOffset="256" date="Wed Apr 14 11:28:16 EDT 2021" end="408" start="256" starttimestamp="1618413551822" timestamp="544892" />
  <Command __id="49" _type="MoveCaretCommand" caretOffset="258" date="Wed Apr 14 11:28:16 EDT 2021" docOffset="362" starttimestamp="1618413551822" timestamp="545101" />
  <Command __id="50" _type="SelectTextCommand" caretOffset="398" date="Wed Apr 14 11:28:17 EDT 2021" end="398" start="257" starttimestamp="1618413551822" timestamp="545912" />
  <Command __id="51" _type="MoveCaretCommand" caretOffset="398" date="Wed Apr 14 11:28:17 EDT 2021" docOffset="502" starttimestamp="1618413551822" timestamp="546108" />
  <Command __id="52" _type="SelectTextCommand" caretOffset="231" date="Wed Apr 14 11:28:19 EDT 2021" end="397" start="231" starttimestamp="1618413551822" timestamp="547388" />
  <Command __id="53" _type="MoveCaretCommand" caretOffset="256" date="Wed Apr 14 11:28:19 EDT 2021" docOffset="360" starttimestamp="1618413551822" timestamp="547681" />
  <Command __id="42" _type="DiffBasedFileOpenCommand" date="Wed Apr 14 11:28:10 EDT 2021" docASTNodeCount="1375" docActiveCodeLength="7559" docExpressionCount="897" docLength="7559" projectName="TaskBox" starttimestamp="1618413551822" timestamp="538627">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\parser\JavaExpressionParser.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package parser;

import java.util.Arrays;
import java.util.Vector;

import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;


public class JavaExpressionParser {
	public static final char COMMA = ',', PLUS = '+', MINUS = '-', TIMES = '*', DIVIDES = '/', CARET = '^', EQUALS = '=', LP = '(', RP = ')';
	public enum FunctionName{
		SQRT ("sqrt"),
		POW ("pow"),
		EXP ("exp"),
		LOG ("log"),
		SIN ("sin"),
		COS ("cos"),
		TAN ("tan"),
		MIN ("min"),
		MAX ("max");
		public String name;
		FunctionName(String newName){
			name = newName;
		}
	}
	
	
	public JavaExpressionParser(){
		
	}
	
	public Vector<Character> trim(Vector<Character> aVector){
		Vector<Character> newVector = new Vector<Character> ();
		for (Character c : aVector) {
			if (c != ' ') {
				newVector.add(c);
			}
		}
		return newVector;
	}
	
	public boolean isExpression(Vector<Character> aVector) {
		System.out.println("Testing Expression " + aVector);
		if (aVector.size() == 0) return false;
		return isAtomicExpression(aVector) || isAddSubExpression(aVector) || isMultiDivExpression(aVector) || isExpExpression(aVector) || isFunctionExpression(aVector) || isParenthesisExpression(aVector);
	}
	public boolean isAddSubExpression(Vector<Character> aVector) {
		System.out.println("Testing add-sub Expression " + aVector);
		if (aVector.size() == 0) return false;
		int pt = 0;
		while (pt < aVector.size() && 
				(!isAddOrSub(aVector.get(pt)) || !isExpression(truncate(aVector, 0, pt)) || !isExpression(truncate(aVector, pt + 1, aVector.size())))) {
			pt ++;
		}
		if (pt == aVector.size()) return false;
		return true;
	}
	public boolean isMultiDivExpression(Vector<Character> aVector) {
		System.out.println("Testing multi div Expression " + aVector);
		if (aVector.size() == 0) return false;
		int pt = 0;
		while (pt < aVector.size() && 
				(!isMultiOrDiv(aVector.get(pt)) || !isExpression(truncate(aVector, 0, pt)) || !isExpression(truncate(aVector, pt + 1, aVector.size())))) {
			pt ++;
		}
		if (pt == aVector.size()) return false;
		return true;
	}
	public boolean isExpExpression(Vector<Character> aVector) {
		if (aVector.size() == 0) return false;
		int pt = 0;
		while (pt < aVector.size() && 
				(!isCaret(aVector.get(pt)) || !isExpression(truncate(aVector, 0, pt)) || !isExpression(truncate(aVector, pt + 1, aVector.size())))) {
			pt ++;
		}
		if (pt == aVector.size()) return false;
		return true;
	}
	public boolean isFunctionExpression(Vector<Character> aVector) {
		System.out.println("Testing function Expression " + aVector);
		if (aVector.size() == 0) return false;
		int pt = 0;
		while (!isFunctionName(truncate(aVector, 0, pt)) && pt < aVector.size()) {
			pt ++;
		}
		if (aVector.size() == pt) return false;
		return isFunctionParameters(truncate(aVector, pt, aVector.size()));
	}
	public boolean isFunctionParameters(Vector<Character> aVector) {
		return isLeftParenthesis(aVector.get(0)) && isRightParenthesis(aVector.get(aVector.size()-1)) && isParameters(truncateBoth(aVector));
	}
	public boolean isParameters(Vector<Character> aVector) {
		if (aVector.size() == 0) return false;
		if (isExpression(aVector)) return true;
		int pt = 0;
		while (pt < aVector.size() && 
				(!isComma(aVector.get(pt)) || !isExpression(truncate(aVector, 0, pt)) || !isParameters(truncate(aVector, pt + 1, aVector.size())))) {
			pt ++;
		}
		if (pt == aVector.size()) return false;
		return true;
	}
	public boolean isParenthesisExpression(Vector<Character> aVector) {
		System.out.println("Testing parenthesis Expression " + aVector);
		if (aVector.size() == 0) return false;
		System.out.println("Parenthesis Expression " + truncateBoth(aVector));
		return isLeftParenthesis(aVector.get(0)) && isRightParenthesis(aVector.get(aVector.size() - 1)) && isExpression(truncateBoth(aVector));
	}
	public boolean isFunctionName(Vector<Character> aVector) {
		for (FunctionName functionName : FunctionName.values()) {
			if (compare(aVector, functionName.name)) {
				return true;
			}
		}
		return false;
	}
	public boolean isAtomicExpression(Vector<Character> aVector) {
		return isNumber(aVector) || isVariable(aVector);
	}
	public boolean isNumber(Vector<Character> aVector) {
		return isUnsignedNumber(aVector) || (isSign(aVector.get(0)) && isUnsignedNumber(truncateLeft(aVector)));
	}
	public boolean isUnsignedNumber(Vector<Character> aVector) {
		if (aVector.size() == 1) {
			return isDigit(aVector.get(0));
		}
		return isNonZeroDigit(aVector.get(0)) && isDigitString(truncateLeft(aVector));
	}
	public boolean isVariable(Vector<Character> aVector) {
		if (aVector.size() == 1) {
			return isUnsignedVariable(aVector);
		}
		return isUnsignedVariable(aVector) || (isSign(aVector.get(0)) && isUnsignedVariable(truncateLeft(aVector)));
	}
	public boolean isUnsignedVariable(Vector<Character> aVector) {
		if (aVector.size() == 1) {
			return isLetter(aVector.get(0));
		}
		return isLetter(aVector.get(0)) && isLetterDigitString(truncateLeft(aVector));
	}
	public boolean isDigitString(Vector<Character> aVector) {
		if (aVector.size() == 1) {
			return isDigit(aVector.get(0));
		}
		return isDigit(aVector.get(0)) && isDigitString(truncateLeft(aVector));
	}
	public boolean isLetterDigitString(Vector<Character> aVector) {
		if (aVector.size() == 1) {
			return isLetterOrDigit(aVector.get(0));
		}
		return isLetterOrDigit(aVector.get(0)) && isLetterDigitString(truncateLeft(aVector));
	}
	public boolean isLetterOrDigit(char aChar) {
		return isLetter(aChar) || isDigit(aChar);
	}
	public boolean isSign(char aChar) {
		return aChar == PLUS || aChar == MINUS; 
	}
	public boolean isNonZeroDigit(char aChar) {
		return aChar <= '9' && aChar >= '1';
	}
	public boolean isDigit(char aChar) {
		return Character.isDigit(aChar);
	}
	public boolean isLetter(char aChar) {
		return Character.isLetter(aChar);
	}
	public boolean isComma(char aChar) {
		return aChar == COMMA;
	}
	public boolean isRightParenthesis(char aChar) {
		return aChar == RP;
	}
	public boolean isLeftParenthesis(char aChar) {
		return aChar == LP;
	}
	public boolean isAddOrSub(char aChar) {
		return aChar == PLUS || aChar == MINUS;
	}
	public boolean isMultiOrDiv(char aChar) {
		return aChar == TIMES || aChar == DIVIDES;
	}
	public boolean isCaret(char aChar) {
		return CARET == aChar;
	}
	public Vector<Character> truncate(Vector<Character> aVector, int start, int end){
		Vector<Character> newVector = new Vector<Character>();
		for (int i = start; i < end; i ++) {
			newVector.add(aVector.get(i));
		}
		return newVector;
	}
	public Vector<Character> truncateLeft(Vector<Character> aVector){
		return truncate(aVector, 1, aVector.size());
	}
	public Vector<Character> truncateRight(Vector<Character> aVector){
		return truncate(aVector, 0, aVector.size()-1);
	}
	public Vector<Character> truncateBoth(Vector<Character> aVector){
		return truncate(aVector, 1, aVector.size()-1);
	}
	public int find(Vector<Character> aVector, char aChar, int start) {
		for (int i = start; i < aVector.size(); i ++) {
			if (aVector.get(i) == aChar) {
				return i;
			}
		}
		return -1;
	}
	public boolean compare(Vector<Character> aVector, String aString) {
		if (aVector.size() != aString.length()) {
			return false;
		}
		for (int i = 0; i < aVector.size(); i ++) {
			if (aVector.get(i) != aString.charAt(i)) {
				return false;
			}
		}
		return true;
	}
}
]]></snapshot>
  </Command>
  <Command __id="54" _type="SelectTextCommand" caretOffset="400" date="Wed Apr 14 11:28:20 EDT 2021" end="400" start="256" starttimestamp="1618413551822" timestamp="548985" />
  <Command __id="56" _type="MoveCaretCommand" caretOffset="5436" date="Wed Apr 14 11:28:24 EDT 2021" docOffset="5514" starttimestamp="1618413551822" timestamp="553050" />
  <Command __id="55" _type="DiffBasedFileOpenCommand" date="Wed Apr 14 11:28:24 EDT 2021" docASTNodeCount="1036" docActiveCodeLength="6331" docExpressionCount="709" docLength="6331" projectName="TaskBox" starttimestamp="1618413551822" timestamp="552956">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\parser\JavaExpressionTreeParser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package parser;¶¶import java.util.Vector;¶¶import javax.swing.JTree;¶import javax.swing.tree.DefaultMutableTreeNode;¶¶public class JavaExpressionTreeParser {¶	private DefaultMutableTreeNode rootNode;¶	private JTree tree;¶	private JavaExpressionParser parser = new JavaExpressionParser();¶	¶	public JavaExpressionTreeParser(Vector<Character> aVector) {¶		if (parser.isExpression(aVector)) {¶			rootNode = new DefaultMutableTreeNode(aVector);¶			tree = new JTree(rootNode);¶			parse(rootNode);¶		}¶	}¶	¶	public void parse(DefaultMutableTreeNode thisNode) {¶		Vector<Character> aVector = (Vector<Character>) thisNode.getUserObject();¶		if (parser.isAtomicExpression(aVector)) {¶			return;¶		}¶		¶		if (parser.isAddSubExpression(aVector)) {¶			int pt = 0;¶			while (pt < aVector.size() && ¶					(!parser.isAddOrSub(aVector.get(pt)) || !parser.isExpression(parser.truncate(aVector, 0, pt)) || !parser.isExpression(parser.truncate(aVector, pt + 1, aVector.size())))) {¶				pt ++;¶			}¶			¶			Vector<Character> vectorLeft = parser.truncate(aVector, 0, pt);¶			DefaultMutableTreeNode childLeft = new DefaultMutableTreeNode(vectorLeft);¶			¶			Vector<Character> vectorMid = parser.truncate(aVector, pt, pt + 1);¶			DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);¶			¶			Vector<Character> vectorRight = parser.truncate(aVector, pt + 1, aVector.size());¶			DefaultMutableTreeNode childRight = new DefaultMutableTreeNode(vectorRight);¶			¶			thisNode.add(childLeft);¶			parse(childLeft);¶			thisNode.add(childMid);¶			thisNode.add(childRight);¶			parse(childRight);¶			return;¶		}¶		¶		if (parser.isMultiDivExpression(aVector)) {¶			int pt = 0;¶			while (pt < aVector.size() && ¶					(!parser.isMultiOrDiv(aVector.get(pt)) || !parser.isExpression(parser.truncate(aVector, 0, pt)) || !parser.isExpression(parser.truncate(aVector, pt + 1, aVector.size())))) {¶				pt ++;¶			}¶			¶			Vector<Character> vectorLeft = parser.truncate(aVector, 0, pt);¶			DefaultMutableTreeNode childLeft = new DefaultMutableTreeNode(vectorLeft);¶			¶			Vector<Character> vectorMid = parser.truncate(aVector, pt, pt + 1);¶			DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);¶			¶			Vector<Character> vectorRight = parser.truncate(aVector, pt + 1, aVector.size());¶			DefaultMutableTreeNode childRight = new DefaultMutableTreeNode(vectorRight);¶			¶			thisNode.add(childLeft);¶			parse(childLeft);¶			thisNode.add(childMid);¶			thisNode.add(childRight);¶			parse(childRight);¶			return;¶		}¶		¶		if (parser.isFunctionExpression(aVector)) {¶			int pt = 0;¶			while (!parser.isFunctionName(parser.truncate(aVector, 0, pt)) && pt < aVector.size()) {¶				pt ++;¶			}¶			¶			Vector<Character> vectorFunction = parser.truncate(aVector, 0, pt);¶			DefaultMutableTreeNode childFunction = new DefaultMutableTreeNode(vectorFunction);¶			¶			Vector<Character> vectorLeft = parser.truncate(aVector, pt, pt + 1);¶			DefaultMutableTreeNode childLeft = new DefaultMutableTreeNode(vectorLeft);¶			¶			Vector<Character> vectorMid = parser.truncate(aVector, pt + 1, aVector.size() - 1);¶			DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);¶			¶			Vector<Character> vectorRight = parser.truncate(aVector, aVector.size() - 1, aVector.size());¶			DefaultMutableTreeNode childRight = new DefaultMutableTreeNode(vectorRight);¶			¶			thisNode.add(childFunction);¶			thisNode.add(childLeft);¶			thisNode.add(childMid);¶			parseParameters(childMid);¶			thisNode.add(childRight);¶			return;¶		}¶		¶		if (parser.isExpExpression(aVector)) {¶			int pt = 0;¶			while (pt < aVector.size() && ¶					(!parser.isCaret(aVector.get(pt)) || !parser.isExpression(parser.truncate(aVector, 0, pt)) || !parser.isExpression(parser.truncate(aVector, pt + 1, aVector.size())))) {¶				pt ++;¶			}¶			¶			¶			Vector<Character> vectorLeft = parser.truncate(aVector, 0, pt);¶			DefaultMutableTreeNode childLeft = new DefaultMutableTreeNode(vectorLeft);¶			¶			Vector<Character> vectorMid = parser.truncate(aVector, pt, pt + 1);¶			DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);¶			¶			Vector<Character> vectorRight = parser.truncate(aVector, pt + 1, aVector.size());¶			DefaultMutableTreeNode childRight = new DefaultMutableTreeNode(vectorRight);¶			¶			thisNode.add(childLeft);¶			parse(childLeft);¶			thisNode.add(childMid);¶			thisNode.add(childRight);¶			parse(childRight);¶			return;¶		}¶		¶		¶		if (parser.isParenthesisExpression(aVector)) {¶			Vector<Character> vectorLeft = new Vector<Character>();¶			vectorLeft.add('(');¶			¶			Vector<Character> vectorMid = parser.truncateBoth(aVector);¶			DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);¶			¶			Vector<Character> vectorRight = new Vector<Character>();¶			vectorRight.add(')');¶			¶			thisNode.add(new DefaultMutableTreeNode(vectorLeft));¶			thisNode.add(childMid);¶			thisNode.add(new DefaultMutableTreeNode(vectorRight));¶			parse(childMid);¶			return;¶		}¶		¶		¶		¶	}¶	¶	public void parseParameters(DefaultMutableTreeNode thisNode) {¶		Vector<Character> aVector = (Vector<Character>) thisNode.getUserObject();¶		if (parser.isExpression(aVector)) {¶			parse(thisNode);¶			return;¶		}¶		¶		int pt = 0;¶		while (pt < aVector.size() && ¶				(!parser.isComma(aVector.get(pt)) || !parser.isExpression(parser.truncate(aVector, 0, pt)) || !parser.isParameters(parser.truncate(aVector, pt + 1, aVector.size())))) {¶			pt ++;¶		}¶		¶		Vector<Character> vectorLeft = parser.truncate(aVector, 0, pt);¶		DefaultMutableTreeNode childLeft = new DefaultMutableTreeNode(vectorLeft);¶		¶		Vector<Character> vectorMid = parser.truncate(aVector, pt, pt + 1);¶		DefaultMutableTreeNode childMid = new DefaultMutableTreeNode(vectorMid);¶		¶		Vector<Character> vectorRight = parser.truncate(aVector, pt + 1, aVector.size());¶		DefaultMutableTreeNode childRight = new DefaultMutableTreeNode(vectorRight);¶		¶		thisNode.add(childLeft);¶		parse(childLeft);¶		thisNode.add(childMid);¶		thisNode.add(childRight);¶		parseParameters(childRight);¶		return;¶		¶	}¶	¶	public JTree getTree() {¶		return tree;¶	}¶	¶	public DefaultMutableTreeNode getRoot() {¶		return rootNode;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="57" _type="MoveCaretCommand" caretOffset="5017" date="Wed Apr 14 11:28:29 EDT 2021" docOffset="5095" starttimestamp="1618413551822" timestamp="557728" />
  <Command __id="59" _type="MoveCaretCommand" caretOffset="325" date="Wed Apr 14 11:28:36 EDT 2021" docOffset="374" starttimestamp="1618413551822" timestamp="564644" />
  <Command __id="58" _type="DiffBasedFileOpenCommand" date="Wed Apr 14 11:28:36 EDT 2021" docASTNodeCount="967" docActiveCodeLength="5669" docExpressionCount="666" docLength="5669" projectName="TaskBox" starttimestamp="1618413551822" timestamp="564529">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\parser\TexTreeBuilder.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package parser;¶¶import java.util.Vector;¶import javax.swing.tree.DefaultMutableTreeNode;¶¶public class TexTreeBuilder {¶	private DefaultMutableTreeNode root;¶	private JavaExpressionParser parser = new JavaExpressionParser();¶	¶	¶	public String build(DefaultMutableTreeNode aRoot) {¶		root = aRoot;¶		String resultString = "";¶		for (Character c : getTexVector(root)) {¶			resultString += c;¶		}¶		return resultString;¶	}¶	¶	public Vector<Character> getTexVector(DefaultMutableTreeNode thisNode) {¶		Vector<Character> childrenVector = new Vector<Character> ();¶		for (int i = 0; i < thisNode.getChildCount(); i ++) {¶			DefaultMutableTreeNode child = (DefaultMutableTreeNode) thisNode.getChildAt(i);¶			if (child.getChildCount() == 0) {¶				if (((Vector<Character>) child.getUserObject()).get(0) == '/') {¶					Vector<Character> fracVector = new Vector<Character> ();¶					fracVector.add('\\');¶					fracVector.add('f');¶					fracVector.add('r');¶					fracVector.add('a');¶					fracVector.add('c');¶					fracVector.add('{');¶					fracVector = concat(fracVector, childrenVector);¶					fracVector.add('}');¶					fracVector.add('{');¶					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 1);¶					if (nextChild.getChildCount() == 0) {¶						fracVector = concat(fracVector, ((Vector<Character>) nextChild.getUserObject()));¶					}¶					else {¶						fracVector = concat(fracVector, getTexVector(nextChild));¶					}¶					fracVector.add('}');¶					i ++;¶					childrenVector = fracVector;¶				}¶				else if (((Vector<Character>) child.getUserObject()).get(0) == '^') {¶					Vector<Character> powerVector = new Vector<Character> ();¶					powerVector = concat(childrenVector, powerVector);¶					powerVector.add('^');¶					powerVector.add('{');¶					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 1);¶					if (nextChild.getChildCount() == 0) {¶						powerVector = concat(powerVector, ((Vector<Character>) nextChild.getUserObject()));¶					}¶					else {¶						powerVector = concat(powerVector, getTexVector(nextChild));¶					}¶					powerVector.add('}');¶					i ++;¶					childrenVector = powerVector;¶				}¶				else if (((Vector<Character>) child.getUserObject()).get(0) == '*') {¶					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 1);¶					DefaultMutableTreeNode prevChild = (DefaultMutableTreeNode) thisNode.getChildAt(i - 1);¶					Vector<Character> timesVector = new Vector<Character> ();¶					timesVector = concat(childrenVector, timesVector);¶					if (prevChild.getChildCount() == 0 && nextChild.getChildCount() == 0 ¶							&& parser.isNumber((Vector<Character>) prevChild.getUserObject()) ¶							&& parser.isUnsignedVariable((Vector<Character>) nextChild.getUserObject())) {¶					}¶					else {¶						timesVector.add(' ');¶						timesVector.add('\\');¶						timesVector.add('t');¶						timesVector.add('i');¶						timesVector.add('m');¶						timesVector.add('e');¶						timesVector.add('s');¶						timesVector.add(' ');¶						childrenVector = timesVector;¶					}¶				}¶				¶				else if (isSqrt((Vector<Character>) child.getUserObject()) ¶						&& parser.isExpression((Vector<Character>) ((DefaultMutableTreeNode) thisNode.getChildAt(i + 2)).getUserObject())) {¶					Vector<Character> fracVector = new Vector<Character> ();¶					fracVector.add('\\');¶					fracVector.add('s');¶					fracVector.add('q');¶					fracVector.add('r');¶					fracVector.add('t');¶					fracVector.add('{');¶					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 2);¶					if (nextChild.getChildCount() == 0) {¶						fracVector = concat(fracVector, ((Vector<Character>) nextChild.getUserObject()));¶					}¶					else {¶						fracVector = concat(fracVector, getTexVector(nextChild));¶					}¶					fracVector.add('}');¶					i += 3;¶					childrenVector = fracVector;¶				}¶				¶				else if (isExp((Vector<Character>) child.getUserObject())¶						&& parser.isExpression((Vector<Character>) ((DefaultMutableTreeNode) thisNode.getChildAt(i + 2)).getUserObject())) {¶					Vector<Character> fracVector = new Vector<Character> ();¶					fracVector.add('e');¶					fracVector.add('^');¶					fracVector.add('{');¶					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 2);¶					if (nextChild.getChildCount() == 0) {¶						fracVector = concat(fracVector, ((Vector<Character>) nextChild.getUserObject()));¶					}¶					else {¶						fracVector = concat(fracVector, getTexVector(nextChild));¶					}¶					fracVector.add('}');¶					i += 3;¶					childrenVector = fracVector;¶				}¶				¶				¶				else {¶					childrenVector = concat(childrenVector, (Vector<Character>) child.getUserObject());¶				}¶			}¶			else {¶				childrenVector = concat(childrenVector, getTexVector(child));¶			}¶		}¶		return childrenVector;	¶	}¶	¶	public Vector<Character> concat(Vector<Character> vectorA, Vector<Character> vectorB){¶		Vector<Character> newVector = new Vector<Character> ();¶		for (Character c : vectorA) {¶			newVector.add(c);¶		}¶		for (Character c : vectorB) {¶			newVector.add(c);¶		}¶		return newVector;¶	}¶	¶	public boolean isSqrt(Vector<Character> aVector) {¶		if (aVector.size() != 4) return false;¶		return aVector.get(0) == 's' && aVector.get(1) == 'q' && aVector.get(2) == 'r' && aVector.get(3) == 't';¶	}¶	¶	public boolean isExp(Vector<Character> aVector) {¶		if (aVector.size() != 3) return false;¶		return aVector.get(0) == 'e' && aVector.get(1) == 'x' && aVector.get(2) == 'p';¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="60" _type="SelectTextCommand" caretOffset="3942" date="Wed Apr 14 11:28:39 EDT 2021" end="4671" start="3942" starttimestamp="1618413551822" timestamp="567560" />
  <Command __id="62" _type="MoveCaretCommand" caretOffset="618" date="Wed Apr 14 11:29:11 EDT 2021" docOffset="675" starttimestamp="1618413551822" timestamp="599651" />
  <Command __id="63" _type="MoveCaretCommand" caretOffset="514" date="Wed Apr 14 11:29:14 EDT 2021" docOffset="571" starttimestamp="1618413551822" timestamp="602334" />
  <Command __id="64" _type="MoveCaretCommand" caretOffset="491" date="Wed Apr 14 11:29:14 EDT 2021" docOffset="548" starttimestamp="1618413551822" timestamp="603011" />
  <Command __id="65" _type="MoveCaretCommand" caretOffset="491" date="Wed Apr 14 11:29:15 EDT 2021" docOffset="548" starttimestamp="1618413551822" timestamp="603533" />
  <Command __id="66" _type="MoveCaretCommand" caretOffset="513" date="Wed Apr 14 11:29:16 EDT 2021" docOffset="570" starttimestamp="1618413551822" timestamp="604297" />
  <Command __id="67" _type="MoveCaretCommand" caretOffset="447" date="Wed Apr 14 11:29:16 EDT 2021" docOffset="504" starttimestamp="1618413551822" timestamp="604609" />
  <Command __id="68" _type="MoveCaretCommand" caretOffset="447" date="Wed Apr 14 11:29:17 EDT 2021" docOffset="504" starttimestamp="1618413551822" timestamp="605917" />
  <Command __id="69" _type="MoveCaretCommand" caretOffset="602" date="Wed Apr 14 11:29:21 EDT 2021" docOffset="659" starttimestamp="1618413551822" timestamp="609683" />
  <Command __id="70" _type="MoveCaretCommand" caretOffset="555" date="Wed Apr 14 11:29:22 EDT 2021" docOffset="612" starttimestamp="1618413551822" timestamp="610474" />
  <Command __id="71" _type="SelectTextCommand" caretOffset="579" date="Wed Apr 14 11:29:26 EDT 2021" end="591" start="579" starttimestamp="1618413551822" timestamp="614180" />
  <Command __id="72" _type="MoveCaretCommand" caretOffset="581" date="Wed Apr 14 11:29:26 EDT 2021" docOffset="638" starttimestamp="1618413551822" timestamp="614337" />
  <Command __id="73" _type="MoveCaretCommand" caretOffset="465" date="Wed Apr 14 11:29:26 EDT 2021" docOffset="522" starttimestamp="1618413551822" timestamp="614591" />
  <Command __id="74" _type="MoveCaretCommand" caretOffset="465" date="Wed Apr 14 11:29:27 EDT 2021" docOffset="522" starttimestamp="1618413551822" timestamp="615194" />
  <Command __id="75" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Wed Apr 14 11:29:40 EDT 2021" starttimestamp="1618413551822" timestamp="628402" />
  <Command __id="76" _type="RunCommand" date="Wed Apr 14 11:29:40 EDT 2021" kind="HitBreakPoint" projectName="TaskBox" starttimestamp="1618413551822" timestamp="628595" type="Run" />
  <Command __id="77" _type="RunCommand" date="Wed Apr 14 11:29:40 EDT 2021" kind="HitBreakPoint" projectName="TaskBox" starttimestamp="1618413551822" timestamp="628596" type="Run" />
  <Command __id="78" _type="ConsoleOutput" date="Wed Apr 14 11:29:40 EDT 2021" overflow="false" starttimestamp="1618413551822" timestamp="628762" type="ConsoleOutput">
    <outputString><![CDATA[Testing Expression [s, q, r, t, (, 1, 0, 0, )]
Testing add-sub Expression [s, q, r, t, (, 1, 0, 0, )]
Testing multi div Expression [s, q, r, t, (, 1, 0, 0, )]
Testing function Expression [s, q, r, t, (, 1, 0, 0, )]
Testing Expression [1, 0, 0]
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="79" _type="ShellCommand" date="Wed Apr 14 11:29:41 EDT 2021" starttimestamp="1618413551822" timestamp="629449" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="80" _type="ConsoleOutput" date="Wed Apr 14 11:29:41 EDT 2021" overflow="false" starttimestamp="1618413551822" timestamp="629523" type="ConsoleOutput">
    <outputString><![CDATA[Testing add-sub Expression [s, q, r, t, (, 1, 0, 0, )]
Testing multi div Expression [s, q, r, t, (, 1, 0, 0, )]
Testing function Expression [s, q, r, t, (, 1, 0, 0, )]
Testing Expression [1, 0, 0]
Testing Expression [1, 0, 0]
Testing Expression [1, 0, 0]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Testing Expression [s, q, r, t, (, 1, 0, 0, )]¶"), Diff(EQUAL,"Testing add-sub Expression [s, q, r, t, (, 1, 0, 0, )]¶Testing multi div Expression [s, q, r, t, (, 1, 0, 0, )]¶Testing function Expression [s, q, r, t, (, 1, 0, 0, )]¶Testing Expression [1, 0, 0]¶"), Diff(INSERT,"Testing Expression [1, 0, 0]¶Testing Expression [1, 0, 0]¶")]]]></diff>
  </Command>
  <Command __id="61" _type="DiffBasedFileOpenCommand" date="Wed Apr 14 11:29:11 EDT 2021" docASTNodeCount="121" docActiveCodeLength="633" docExpressionCount="75" docLength="687" projectName="TaskBox" starttimestamp="1618413551822" timestamp="599581">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\parser\ParserMain.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package parser;

import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JTree;

public class ParserMain{
	public static void main(String[] args) {
		String exp = "sqrt(100)";
		Vector<Character> rootVector = new Vector<Character> ();
		for (int i = 0; i < exp.length(); i ++) {
			rootVector.add(exp.charAt(i));
		}
		// System.out.println(parser.isExpression(rootVector))
		JavaExpressionTreeParser treeParser = new JavaExpressionTreeParser(rootVector);
		
		JFrame frame = new JFrame();
		frame.add(treeParser.getTree());
		TexTreeBuilder builder = new TexTreeBuilder();
		builder.build(treeParser.getRoot());
		frame.setVisible(true);
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="82" _type="RunCommand" date="Wed Apr 14 11:29:58 EDT 2021" kind="HitBreakPoint" projectName="TaskBox" starttimestamp="1618413551822" timestamp="646847" type="Run" />
  <Command __id="83" _type="RunCommand" date="Wed Apr 14 11:29:58 EDT 2021" kind="HitBreakPoint" projectName="TaskBox" starttimestamp="1618413551822" timestamp="646847" type="Run" />
  <Command __id="84" _type="DiffBasedFileOpenCommand" date="Wed Apr 14 11:30:00 EDT 2021" docASTNodeCount="967" docActiveCodeLength="5669" docExpressionCount="666" docLength="5669" projectName="TaskBox" starttimestamp="1618413551822" timestamp="648384">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\parser\TexTreeBuilder.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package parser;¶¶import java.util.Vector;¶import javax.swing.tree.DefaultMutableTreeNode;¶¶public class TexTreeBuilder {¶	private DefaultMutableTreeNode root;¶	private JavaExpressionParser parser = new JavaExpressionParser();¶	¶	¶	public String build(DefaultMutableTreeNode aRoot) {¶		root = aRoot;¶		String resultString = "";¶		for (Character c : getTexVector(root)) {¶			resultString += c;¶		}¶		return resultString;¶	}¶	¶	public Vector<Character> getTexVector(DefaultMutableTreeNode thisNode) {¶		Vector<Character> childrenVector = new Vector<Character> ();¶		for (int i = 0; i < thisNode.getChildCount(); i ++) {¶			DefaultMutableTreeNode child = (DefaultMutableTreeNode) thisNode.getChildAt(i);¶			if (child.getChildCount() == 0) {¶				if (((Vector<Character>) child.getUserObject()).get(0) == '/') {¶					Vector<Character> fracVector = new Vector<Character> ();¶					fracVector.add('\\');¶					fracVector.add('f');¶					fracVector.add('r');¶					fracVector.add('a');¶					fracVector.add('c');¶					fracVector.add('{');¶					fracVector = concat(fracVector, childrenVector);¶					fracVector.add('}');¶					fracVector.add('{');¶					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 1);¶					if (nextChild.getChildCount() == 0) {¶						fracVector = concat(fracVector, ((Vector<Character>) nextChild.getUserObject()));¶					}¶					else {¶						fracVector = concat(fracVector, getTexVector(nextChild));¶					}¶					fracVector.add('}');¶					i ++;¶					childrenVector = fracVector;¶				}¶				else if (((Vector<Character>) child.getUserObject()).get(0) == '^') {¶					Vector<Character> powerVector = new Vector<Character> ();¶					powerVector = concat(childrenVector, powerVector);¶					powerVector.add('^');¶					powerVector.add('{');¶					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 1);¶					if (nextChild.getChildCount() == 0) {¶						powerVector = concat(powerVector, ((Vector<Character>) nextChild.getUserObject()));¶					}¶					else {¶						powerVector = concat(powerVector, getTexVector(nextChild));¶					}¶					powerVector.add('}');¶					i ++;¶					childrenVector = powerVector;¶				}¶				else if (((Vector<Character>) child.getUserObject()).get(0) == '*') {¶					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 1);¶					DefaultMutableTreeNode prevChild = (DefaultMutableTreeNode) thisNode.getChildAt(i - 1);¶					Vector<Character> timesVector = new Vector<Character> ();¶					timesVector = concat(childrenVector, timesVector);¶					if (prevChild.getChildCount() == 0 && nextChild.getChildCount() == 0 ¶							&& parser.isNumber((Vector<Character>) prevChild.getUserObject()) ¶							&& parser.isUnsignedVariable((Vector<Character>) nextChild.getUserObject())) {¶					}¶					else {¶						timesVector.add(' ');¶						timesVector.add('\\');¶						timesVector.add('t');¶						timesVector.add('i');¶						timesVector.add('m');¶						timesVector.add('e');¶						timesVector.add('s');¶						timesVector.add(' ');¶						childrenVector = timesVector;¶					}¶				}¶				¶				else if (isSqrt((Vector<Character>) child.getUserObject()) ¶						&& parser.isExpression((Vector<Character>) ((DefaultMutableTreeNode) thisNode.getChildAt(i + 2)).getUserObject())) {¶					Vector<Character> fracVector = new Vector<Character> ();¶					fracVector.add('\\');¶					fracVector.add('s');¶					fracVector.add('q');¶					fracVector.add('r');¶					fracVector.add('t');¶					fracVector.add('{');¶					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 2);¶					if (nextChild.getChildCount() == 0) {¶						fracVector = concat(fracVector, ((Vector<Character>) nextChild.getUserObject()));¶					}¶					else {¶						fracVector = concat(fracVector, getTexVector(nextChild));¶					}¶					fracVector.add('}');¶					i += 3;¶					childrenVector = fracVector;¶				}¶				¶				else if (isExp((Vector<Character>) child.getUserObject())¶						&& parser.isExpression((Vector<Character>) ((DefaultMutableTreeNode) thisNode.getChildAt(i + 2)).getUserObject())) {¶					Vector<Character> fracVector = new Vector<Character> ();¶					fracVector.add('e');¶					fracVector.add('^');¶					fracVector.add('{');¶					DefaultMutableTreeNode nextChild = (DefaultMutableTreeNode) thisNode.getChildAt(i + 2);¶					if (nextChild.getChildCount() == 0) {¶						fracVector = concat(fracVector, ((Vector<Character>) nextChild.getUserObject()));¶					}¶					else {¶						fracVector = concat(fracVector, getTexVector(nextChild));¶					}¶					fracVector.add('}');¶					i += 3;¶					childrenVector = fracVector;¶				}¶				¶				¶				else {¶					childrenVector = concat(childrenVector, (Vector<Character>) child.getUserObject());¶				}¶			}¶			else {¶				childrenVector = concat(childrenVector, getTexVector(child));¶			}¶		}¶		return childrenVector;	¶	}¶	¶	public Vector<Character> concat(Vector<Character> vectorA, Vector<Character> vectorB){¶		Vector<Character> newVector = new Vector<Character> ();¶		for (Character c : vectorA) {¶			newVector.add(c);¶		}¶		for (Character c : vectorB) {¶			newVector.add(c);¶		}¶		return newVector;¶	}¶	¶	public boolean isSqrt(Vector<Character> aVector) {¶		if (aVector.size() != 4) return false;¶		return aVector.get(0) == 's' && aVector.get(1) == 'q' && aVector.get(2) == 'r' && aVector.get(3) == 't';¶	}¶	¶	public boolean isExp(Vector<Character> aVector) {¶		if (aVector.size() != 3) return false;¶		return aVector.get(0) == 'e' && aVector.get(1) == 'x' && aVector.get(2) == 'p';¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="85" _type="SelectTextCommand" caretOffset="3942" date="Wed Apr 14 11:30:00 EDT 2021" end="4671" start="3942" starttimestamp="1618413551822" timestamp="648452" />
  <Command __id="87" _type="MoveCaretCommand" caretOffset="465" date="Wed Apr 14 11:30:02 EDT 2021" docOffset="522" starttimestamp="1618413551822" timestamp="650311" />
  <Command __id="86" _type="DiffBasedFileOpenCommand" date="Wed Apr 14 11:30:02 EDT 2021" docASTNodeCount="121" docActiveCodeLength="633" docExpressionCount="75" docLength="687" projectName="TaskBox" starttimestamp="1618413551822" timestamp="650235">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\parser\ParserMain.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package parser;¶¶import java.util.Vector;¶¶import javax.swing.JFrame;¶import javax.swing.JTree;¶¶public class ParserMain{¶	public static void main(String[] args) {¶		String exp = "sqrt(100)";¶		Vector<Character> rootVector = new Vector<Character> ();¶		for (int i = 0; i < exp.length(); i ++) {¶			rootVector.add(exp.charAt(i));¶		}¶		// System.out.println(parser.isExpression(rootVector))¶		JavaExpressionTreeParser treeParser = new JavaExpressionTreeParser(rootVector);¶		¶		JFrame frame = new JFrame();¶		frame.add(treeParser.getTree());¶		TexTreeBuilder builder = new TexTreeBuilder();¶		builder.build(treeParser.getRoot());¶		frame.setVisible(true);¶	}¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="88" _type="MoveCaretCommand" caretOffset="141" date="Wed Apr 14 11:30:03 EDT 2021" docOffset="198" starttimestamp="1618413551822" timestamp="651562" />
  <Command __id="89" _type="MoveCaretCommand" caretOffset="140" date="Wed Apr 14 11:30:04 EDT 2021" docOffset="197" starttimestamp="1618413551822" timestamp="652426" />
  <DocumentChange __id="90" _type="Insert" date="Wed Apr 14 11:30:05 EDT 2021" docASTNodeCount="121" docActiveCodeLength="634" docExpressionCount="75" docLength="688" length="1" offset="197" starttimestamp="1618413551822" timestamp="653432">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <Command __id="91" _type="InsertStringCommand" date="Wed Apr 14 11:30:05 EDT 2021" starttimestamp="1618413551822" timestamp="653435" timestamp2="653435">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="93" _type="InsertStringCommand" date="Wed Apr 14 11:30:07 EDT 2021" starttimestamp="1618413551822" timestamp="655467" timestamp2="655467">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="94" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 14 11:30:07 EDT 2021" starttimestamp="1618413551822" timestamp="656139" />
  <Command __id="97" _type="MoveCaretCommand" caretOffset="185" date="Wed Apr 14 11:30:08 EDT 2021" docOffset="242" starttimestamp="1618413551822" timestamp="656833" />
  <Command __id="98" _type="MoveCaretCommand" caretOffset="142" date="Wed Apr 14 11:30:09 EDT 2021" docOffset="199" starttimestamp="1618413551822" timestamp="657798" />
  <Command __id="99" _type="SelectTextCommand" caretOffset="137" date="Wed Apr 14 11:30:10 EDT 2021" end="142" start="137" starttimestamp="1618413551822" timestamp="658998" />
  <Command __id="101" _type="InsertStringCommand" date="Wed Apr 14 11:30:11 EDT 2021" starttimestamp="1618413551822" timestamp="659686" timestamp2="659686">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="103" _type="InsertStringCommand" date="Wed Apr 14 11:30:11 EDT 2021" starttimestamp="1618413551822" timestamp="659945" timestamp2="659945">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="105" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 14 11:30:12 EDT 2021" starttimestamp="1618413551822" timestamp="660219" />
  <Command __id="107" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 14 11:30:12 EDT 2021" starttimestamp="1618413551822" timestamp="660387" />
  <Command __id="108" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Apr 14 11:30:12 EDT 2021" starttimestamp="1618413551822" timestamp="661096" />
  <Command __id="109" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Apr 14 11:30:13 EDT 2021" starttimestamp="1618413551822" timestamp="661282" />
  <Command __id="110" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 14 11:30:13 EDT 2021" starttimestamp="1618413551822" timestamp="661682" />
  <Command __id="112" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 14 11:30:14 EDT 2021" starttimestamp="1618413551822" timestamp="662248" />
  <Command __id="114" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 14 11:30:14 EDT 2021" starttimestamp="1618413551822" timestamp="662406" />
  <Command __id="116" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 14 11:30:14 EDT 2021" starttimestamp="1618413551822" timestamp="662553" />
  <Command __id="118" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 14 11:30:14 EDT 2021" starttimestamp="1618413551822" timestamp="662674" />
  <Command __id="120" _type="InsertStringCommand" date="Wed Apr 14 11:30:15 EDT 2021" starttimestamp="1618413551822" timestamp="663346" timestamp2="663346">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="122" _type="InsertStringCommand" date="Wed Apr 14 11:30:15 EDT 2021" starttimestamp="1618413551822" timestamp="663518" timestamp2="663518">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="124" _type="InsertStringCommand" date="Wed Apr 14 11:30:15 EDT 2021" starttimestamp="1618413551822" timestamp="663598" timestamp2="663598">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="125" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 14 11:30:15 EDT 2021" starttimestamp="1618413551822" timestamp="663987" />
  <Command __id="127" _type="InsertStringCommand" date="Wed Apr 14 11:30:16 EDT 2021" starttimestamp="1618413551822" timestamp="664452" timestamp2="664452">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="129" _type="InsertStringCommand" date="Wed Apr 14 11:30:16 EDT 2021" starttimestamp="1618413551822" timestamp="664830" timestamp2="664830">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="131" _type="InsertStringCommand" date="Wed Apr 14 11:30:16 EDT 2021" starttimestamp="1618413551822" timestamp="664955" timestamp2="664955">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="132" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 14 11:30:17 EDT 2021" starttimestamp="1618413551822" timestamp="665544" />
  <Command __id="135" _type="MoveCaretCommand" caretOffset="394" date="Wed Apr 14 11:30:17 EDT 2021" docOffset="451" starttimestamp="1618413551822" timestamp="665972" />
  <Command __id="136" _type="EclipseCommand" commandID="org.eclipse.wst.server.launchShortcut.run" date="Wed Apr 14 11:30:22 EDT 2021" starttimestamp="1618413551822" timestamp="670811" />
  <Command __id="137" _type="ShellCommand" date="Wed Apr 14 11:30:22 EDT 2021" starttimestamp="1618413551822" timestamp="670830" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="138" _type="ShellCommand" date="Wed Apr 14 11:30:23 EDT 2021" starttimestamp="1618413551822" timestamp="671921" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="139" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Wed Apr 14 11:30:27 EDT 2021" starttimestamp="1618413551822" timestamp="675413" />
  <Command __id="140" _type="RunCommand" date="Wed Apr 14 11:30:27 EDT 2021" kind="HitBreakPoint" projectName="TaskBox" starttimestamp="1618413551822" timestamp="675547" type="Run" />
  <Command __id="141" _type="RunCommand" date="Wed Apr 14 11:30:27 EDT 2021" kind="HitBreakPoint" projectName="TaskBox" starttimestamp="1618413551822" timestamp="675547" type="Run" />
  <Command __id="142" _type="ConsoleOutput" date="Wed Apr 14 11:30:27 EDT 2021" overflow="false" starttimestamp="1618413551822" timestamp="675736" type="ConsoleOutput">
    <outputString><![CDATA[Testing Expression [p, o, w, (, 1, ,, 2, )]
Testing add-sub Expression [p, o, w, (, 1, ,, 2, )]
Testing multi div Expression [p, o, w, (, 1, ,, 2, )]
Testing function Expression [p, o, w, (, 1, ,, 2, )]
Testing Expression [1, ,, 2]
Testing add-sub Expression [1, ,, 2]
Testing multi div Expression [1, ,, 2]
Testing function Expression [1, ,, 2]
Testing parenthesis Expression [1, ,, 2]
Parenthesis Expression [,]
Testing Expression [1]
Testing Expression [2]
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Testing Expression [p, o, w, (, 1, ,, 2, )]¶"), Diff(EQUAL,"Testing add-sub Expression ["), Diff(DELETE,"s, q"), Diff(INSERT,"p"), Diff(EQUAL,", "), Diff(DELETE,"r"), Diff(INSERT,"o"), Diff(EQUAL,", "), Diff(DELETE,"t"), Diff(INSERT,"w"), Diff(EQUAL,", (, 1, "), Diff(DELETE,"0"), Diff(INSERT,","), Diff(EQUAL,", "), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,", )]¶Testing multi div Expression ["), Diff(DELETE,"s, q"), Diff(INSERT,"p"), Diff(EQUAL,", "), Diff(DELETE,"r"), Diff(INSERT,"o"), Diff(EQUAL,", "), Diff(DELETE,"t"), Diff(INSERT,"w"), Diff(EQUAL,", (, 1, "), Diff(DELETE,"0"), Diff(INSERT,","), Diff(EQUAL,", "), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,", )]¶Testing function Expression ["), Diff(DELETE,"s"), Diff(INSERT,"p"), Diff(EQUAL,", "), Diff(DELETE,"q"), Diff(INSERT,"o"), Diff(EQUAL,", "), Diff(DELETE,"r"), Diff(INSERT,"w"), Diff(EQUAL,", "), Diff(DELETE,"t"), Diff(INSERT,"(, 1, ,, 2, )]¶Testing Expression [1"), Diff(EQUAL,", "), Diff(DELETE,"("), Diff(INSERT,","), Diff(EQUAL,", "), Diff(DELETE,"1, 0, 0"), Diff(INSERT,"2]¶Testing add-sub Expression [1, ,"), Diff(EQUAL,", "), Diff(DELETE,")"), Diff(INSERT,"2"), Diff(EQUAL,"]¶Testing "), Diff(INSERT,"multi div "), Diff(EQUAL,"Expression [1, "), Diff(DELETE,"0"), Diff(INSERT,","), Diff(EQUAL,", "), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"]¶Testing "), Diff(INSERT,"function "), Diff(EQUAL,"Expression [1, "), Diff(DELETE,"0"), Diff(INSERT,","), Diff(EQUAL,", "), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"]¶Testing "), Diff(INSERT,"parenthesis "), Diff(EQUAL,"Expression [1, "), Diff(DELETE,"0, 0"), Diff(INSERT,",, 2]¶Parenthesis Expression [,]¶Testing Expression [1]¶Testing Expression [2"), Diff(EQUAL,"]¶")]]]></diff>
  </Command>
  <Command __id="143" _type="ShellCommand" date="Wed Apr 14 11:30:27 EDT 2021" starttimestamp="1618413551822" timestamp="676001" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="144" _type="ConsoleOutput" date="Wed Apr 14 11:30:27 EDT 2021" overflow="false" starttimestamp="1618413551822" timestamp="676072" type="ConsoleOutput">
    <outputString><![CDATA[Testing add-sub Expression [p, o, w, (, 1, ,, 2, )]
Testing multi div Expression [p, o, w, (, 1, ,, 2, )]
Testing function Expression [p, o, w, (, 1, ,, 2, )]
Testing Expression [1, ,, 2]
Testing add-sub Expression [1, ,, 2]
Testing multi div Expression [1, ,, 2]
Testing function Expression [1, ,, 2]
Testing parenthesis Expression [1, ,, 2]
Parenthesis Expression [,]
Testing Expression [1]
Testing Expression [2]
Testing Expression [1, ,, 2]
Testing add-sub Expression [1, ,, 2]
Testing multi div Expression [1, ,, 2]
Testing function Expression [1, ,, 2]
Testing parenthesis Expression [1, ,, 2]
Parenthesis Expression [,]
Testing Expression [1]
Testing Expression [2]
Testing Expression [2]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Testing Expression [p, o, w, (, 1, ,, 2, )]¶"), Diff(EQUAL,"Testing add-sub Expression [p, o, w, (, 1, ,, 2, )]¶Testing multi div Expression [p, o, w, (, 1, ,, 2, )]¶Testing function Expression [p, o, w, (, 1, ,, 2, )]¶Testing Expression [1, ,, 2]¶Testing add-sub Expression [1, ,, 2]¶Testing multi div Expression [1, ,, 2]¶Testing function Expression [1, ,, 2]¶Testing parenthesis Expression [1, ,, 2]¶Parenthesis Expression [,]¶Testing Expression [1]¶Testing Expression [2]¶"), Diff(INSERT,"Testing Expression [1, ,, 2]¶Testing add-sub Expression [1, ,, 2]¶Testing multi div Expression [1, ,, 2]¶Testing function Expression [1, ,, 2]¶Testing parenthesis Expression [1, ,, 2]¶Parenthesis Expression [,]¶Testing Expression [1]¶Testing Expression [2]¶Testing Expression [2]¶")]]]></diff>
  </Command>
  <DocumentChange __id="92" _type="Insert" date="Wed Apr 14 11:30:07 EDT 2021" docASTNodeCount="121" docActiveCodeLength="635" docExpressionCount="75" docLength="689" length="1" offset="198" starttimestamp="1618413551822" timestamp="655464">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="100" _type="Replace" date="Wed Apr 14 11:30:11 EDT 2021" docASTNodeCount="121" docActiveCodeLength="631" docExpressionCount="75" docLength="685" endLine="9" insertionLength="1" int_docASTNodeCount="121" int_docActiveCodeLength="630" int_docExpressionCount="75" int_docLength="684" length="5" offset="194" startLine="9" starttimestamp="1618413551822" timestamp="659681">
    <deletedText><![CDATA[100+2]]></deletedText>
    <insertedText><![CDATA[1]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="102" _type="Insert" date="Wed Apr 14 11:30:11 EDT 2021" docASTNodeCount="121" docActiveCodeLength="632" docExpressionCount="75" docLength="686" length="1" offset="195" starttimestamp="1618413551822" timestamp="659943">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="104" _type="Delete" date="Wed Apr 14 11:30:12 EDT 2021" docASTNodeCount="121" docActiveCodeLength="630" docExpressionCount="75" docLength="684" endLine="9" length="2" offset="194" repeat="2" startLine="9" starttimestamp="1618413551822" timestamp="660216" timestamp2="660385">
    <text><![CDATA[1,]]></text>
  </DocumentChange>
  <DocumentChange __id="111" _type="Delete" date="Wed Apr 14 11:30:14 EDT 2021" docASTNodeCount="121" docActiveCodeLength="626" docExpressionCount="75" docLength="680" endLine="9" length="4" offset="189" repeat="4" startLine="9" starttimestamp="1618413551822" timestamp="662246" timestamp2="662673">
    <text><![CDATA[sqrt]]></text>
  </DocumentChange>
  <DocumentChange __id="119" _type="Insert" date="Wed Apr 14 11:30:15 EDT 2021" docASTNodeCount="121" docActiveCodeLength="629" docExpressionCount="75" docLength="683" length="3" offset="189" repeat="3" starttimestamp="1618413551822" timestamp="663344" timestamp2="663596">
    <text><![CDATA[pow]]></text>
  </DocumentChange>
  <DocumentChange __id="126" _type="Insert" date="Wed Apr 14 11:30:16 EDT 2021" docASTNodeCount="121" docActiveCodeLength="632" docExpressionCount="75" docLength="686" length="3" offset="193" repeat="3" starttimestamp="1618413551822" timestamp="664448" timestamp2="664953">
    <text><![CDATA[1,2]]></text>
  </DocumentChange>
  <Command __id="146" _type="RunCommand" date="Wed Apr 14 11:30:41 EDT 2021" kind="HitBreakPoint" projectName="TaskBox" starttimestamp="1618413551822" timestamp="689483" type="Run" />
  <Command __id="147" _type="RunCommand" date="Wed Apr 14 11:30:41 EDT 2021" kind="HitBreakPoint" projectName="TaskBox" starttimestamp="1618413551822" timestamp="689484" type="Run" />
  <Command __id="149" _type="MoveCaretCommand" caretOffset="4580" date="Wed Apr 14 11:30:43 EDT 2021" docOffset="4629" starttimestamp="1618413551822" timestamp="691481" />
  <Command __id="150" _type="SelectTextCommand" caretOffset="3942" date="Wed Apr 14 11:30:45 EDT 2021" end="4671" start="3942" starttimestamp="1618413551822" timestamp="693381" />
  <Command __id="151" _type="ShellCommand" date="Wed Apr 14 11:38:54 EDT 2021" starttimestamp="1618413551822" timestamp="1182453" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="152" _type="ShellCommand" date="Wed Apr 14 11:44:20 EDT 2021" starttimestamp="1618413551822" timestamp="1508279" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="153" _type="MoveCaretCommand" caretOffset="4798" date="Wed Apr 14 11:44:20 EDT 2021" docOffset="4847" starttimestamp="1618413551822" timestamp="1508345" />
  <Command __id="154" _type="SelectTextCommand" caretOffset="3942" date="Wed Apr 14 11:44:22 EDT 2021" end="4671" start="3942" starttimestamp="1618413551822" timestamp="1510892" />
  <Command __id="155" _type="MoveCaretCommand" caretOffset="5189" date="Wed Apr 14 11:44:28 EDT 2021" docOffset="5238" starttimestamp="1618413551822" timestamp="1516587" />
  <Command __id="156" _type="MoveCaretCommand" caretOffset="5184" date="Wed Apr 14 12:08:46 EDT 2021" docOffset="5233" starttimestamp="1618413551822" timestamp="2975002" />
  <Command __id="157" _type="SelectTextCommand" caretOffset="5154" date="Wed Apr 14 12:08:46 EDT 2021" end="5154" start="4921" starttimestamp="1618413551822" timestamp="2975030" />
  <Command __id="158" _type="MoveCaretCommand" caretOffset="4629" date="Wed Apr 14 12:08:54 EDT 2021" docOffset="4678" starttimestamp="1618413551822" timestamp="2982498" />
  <Command __id="159" _type="MoveCaretCommand" caretOffset="4405" date="Wed Apr 14 12:08:55 EDT 2021" docOffset="4454" starttimestamp="1618413551822" timestamp="2983899" />
  <Command __id="160" _type="ShellCommand" date="Wed Apr 14 12:08:56 EDT 2021" starttimestamp="1618413551822" timestamp="2985090" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="161" _type="ShellCommand" date="Wed Apr 14 12:09:01 EDT 2021" starttimestamp="1618413551822" timestamp="2989835" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="162" _type="ShellCommand" date="Wed Apr 14 12:09:02 EDT 2021" starttimestamp="1618413551822" timestamp="2990955" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="163" _type="ShellCommand" date="Wed Apr 14 12:09:05 EDT 2021" starttimestamp="1618413551822" timestamp="2993320" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="164" _type="ShellCommand" date="Wed Apr 14 12:09:06 EDT 2021" starttimestamp="1618413551822" timestamp="2994505" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="165" _type="ShellCommand" date="Wed Apr 14 12:21:28 EDT 2021" starttimestamp="1618413551822" timestamp="3737156" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="166" _type="ShellCommand" date="Wed Apr 14 12:27:38 EDT 2021" starttimestamp="1618413551822" timestamp="4106239" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="167" _type="ShellCommand" date="Wed Apr 14 12:27:39 EDT 2021" starttimestamp="1618413551822" timestamp="4107558" type="ECLIPSE_MINIMIZED" />
  <Command __id="168" _type="ShellCommand" date="Wed Apr 14 12:42:05 EDT 2021" starttimestamp="1618413551822" timestamp="4974106" type="ECLIPSE_MAXIMIZED" />
  <Command __id="169" _type="ShellCommand" date="Wed Apr 14 12:42:05 EDT 2021" starttimestamp="1618413551822" timestamp="4974131" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="170" _type="MoveCaretCommand" caretOffset="4502" date="Wed Apr 14 12:42:40 EDT 2021" docOffset="4551" starttimestamp="1618413551822" timestamp="5008726" />
  <Command __id="171" _type="SelectTextCommand" caretOffset="4438" date="Wed Apr 14 12:42:41 EDT 2021" end="4438" start="3954" starttimestamp="1618413551822" timestamp="5009476" />
  <Command __id="172" _type="MoveCaretCommand" caretOffset="4502" date="Wed Apr 14 12:42:41 EDT 2021" docOffset="4551" starttimestamp="1618413551822" timestamp="5009668" />
  <Command __id="173" _type="MoveCaretCommand" caretOffset="4152" date="Wed Apr 14 12:42:42 EDT 2021" docOffset="4201" starttimestamp="1618413551822" timestamp="5010181" />
  <Command __id="174" _type="ShellCommand" date="Wed Apr 14 12:46:48 EDT 2021" starttimestamp="1618413551822" timestamp="5256776" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="175" _type="ShellCommand" date="Wed Apr 14 13:54:11 EDT 2021" starttimestamp="1618413551822" timestamp="9299199" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="176" _type="MoveCaretCommand" caretOffset="4876" date="Wed Apr 14 13:54:11 EDT 2021" docOffset="4925" starttimestamp="1618413551822" timestamp="9299258" />
  <Command __id="177" _type="ShellCommand" date="Wed Apr 14 13:55:06 EDT 2021" starttimestamp="1618413551822" timestamp="9354183" type="ECLIPSE_LOST_FOCUS" />
</Events>
