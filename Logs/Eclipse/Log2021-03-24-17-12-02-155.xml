<Events startTimestamp="1616620322155" logVersion="1.0.0.202101171653">
  <Command __id="3" _type="ShellCommand" date="Wed Mar 24 17:12:21 EDT 2021" starttimestamp="1616620322155" timestamp="19701" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:12:23 EDT 2021" docASTNodeCount="513" docActiveCodeLength="2876" docExpressionCount="375" docLength="3983" projectName="TaskBox" starttimestamp="1616620322155" timestamp="21343">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\mathEditor\LatexExample.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[/*
 * Simple Java LaTex example
 * http://www.heatonresearch.com/
 * 
 * Copyright 2013 Heaton Research, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *   
 * For more information on Heaton Research copyrights, licenses 
 * and trademarks visit:
 * http://www.heatonresearch.com/copyright
 */

package components.mathEditor;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import org.scilab.forge.jlatexmath.TeXConstants;
import org.scilab.forge.jlatexmath.TeXFormula;
import org.scilab.forge.jlatexmath.TeXIcon;

public class LatexExample extends JFrame implements ActionListener {
	
	private JTextArea latexSource;
	private JButton btnRender;
	private JPanel drawingArea;

	public LatexExample() {
		this.setTitle("JLatexMath Example");
		this.setSize(500, 500);
		Container content = this.getContentPane();
		content.setLayout(new GridLayout(2, 1));
		this.latexSource = new JTextArea();
		
		JPanel editorArea = new JPanel();
		editorArea.setLayout(new BorderLayout());
		editorArea.add(new JScrollPane(this.latexSource),BorderLayout.CENTER);
		editorArea.add(btnRender = new JButton("Render"),BorderLayout.SOUTH);		
		
		content.add(editorArea);
		content.add(this.drawingArea = new JPanel());		
		this.btnRender.addActionListener(this);
		
		this.latexSource.setText("x=\\frac{-b \\pm \\sqrt {b^2-4ac}}{2a}");
	}

	public void render() {
		try {
			// get the text
			String latex = this.latexSource.getText();
			
			// create a formula
			TeXFormula formula = new TeXFormula(latex);
			
			
			// render the formla to an icon of the same size as the formula.
			TeXIcon icon = formula
					.createTeXIcon(TeXConstants.STYLE_DISPLAY, 20);
			
			// insert a border 
			icon.setInsets(new Insets(5, 5, 5, 5));

			// now create an actual image of the rendered equation
			BufferedImage image = new BufferedImage(icon.getIconWidth(),
					icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
			Graphics2D g2 = image.createGraphics();
			g2.setColor(Color.white);
			g2.fillRect(0, 0, icon.getIconWidth(), icon.getIconHeight());
			JLabel jl = new JLabel();
			jl.setForeground(new Color(0, 0, 0));
			icon.paintIcon(jl, g2, 0, 0);
			// at this point the image is created, you could also save it with ImageIO
			
			File outputfile = new File("image.png");
			ImageIO.write(image, "png", outputfile);
			
			// now draw it to the screen			
			Graphics g = this.drawingArea.getGraphics();
			g.drawImage(image,0,0,null);
		} catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error",
					JOptionPane.INFORMATION_MESSAGE);		
		}

	}

	public static void main(String[] args) {
		LatexExample frame = new LatexExample();		
		frame.setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if( e.getSource()==this.btnRender ) {
			render();
		}
		
	}
}
]]></snapshot>
  </Command>
  <Command __id="5" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:12:23 EDT 2021" docOffset="4" starttimestamp="1616620322155" timestamp="21502" />
  <Command __id="6" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:12:24 EDT 2021" docASTNodeCount="745" docActiveCodeLength="4750" docExpressionCount="467" docLength="4784" projectName="TaskBox" starttimestamp="1616620322155" timestamp="22005">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\mathEditor\MathEditorPanel.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package components.mathEditor;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JLabel;
import org.scilab.forge.jlatexmath.TeXConstants;
import org.scilab.forge.jlatexmath.TeXFormula;
import org.scilab.forge.jlatexmath.TeXIcon;

import components.listenersupport.PropertyListenerSupport;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;


@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"helper", "image", "result"})
@EditablePropertyNames({"result"})
public class MathEditorPanel {
	private String helper = "";
	private String result = "";
	private int imageHeight = 100, imageWidth = 400;
	private PropertyListenerSupport propertyListenerSupport = new PropertyListenerSupport();
	private MathExpressionImageInterface image = new MathExpressionImage(0, 0, imageHeight, imageWidth, "src/image/image.png");
	

	public MathExpressionImageInterface getImage() {
		return image;
	}
	
	public void setImage(MathExpressionImageInterface newImage) {
		image = newImage;
	}
	
	public String getResult() {
		return result;
	}
	
	public void setResult(String newResult) {
		String oldResult = result;
		result = newResult;
		render(result);
		System.err.println("rendered");
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "result", oldResult, result));
		getImage().setImageFileName("src/image/latex.png");
		getImage().setHeight(imageHeight);
		getImage().setWidth(imageWidth);
	}
	
	
	
	public void render(String latexString) {
		TeXFormula formula = new TeXFormula(latexString);
		TeXIcon icon = formula.createTeXIcon(TeXConstants.STYLE_DISPLAY, 20);
		icon.setInsets(new Insets(5, 5, 5, 5));
		BufferedImage image = new BufferedImage(icon.getIconWidth(),
				icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
		Graphics2D g2 = image.createGraphics();
		g2.setColor(Color.white);
		g2.fillRect(0, 0, icon.getIconWidth(), icon.getIconHeight());
		JLabel jl = new JLabel();
		jl.setForeground(new Color(0, 0, 0));
		icon.paintIcon(jl, g2, 0, 0);
		imageHeight = image.getHeight();
		imageWidth = image.getWidth();
		File outputfile = new File("src/image/latex.png");
		try {
			ImageIO.write(image, "png", outputfile);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public String getHelper() {
		return helper;
	}
	
	public void setHelper(String newHelper) {
		String oldHelper = helper;
		helper = newHelper;
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "helper", oldHelper, helper));
	}
	
	public void addPropertyChangeListener(PropertyChangeListener aListener) {
		propertyListenerSupport.addElement(aListener);    
    }
	
	public void superScript(String exponent) {
		setHelper("^{" + exponent + "}");
	}
	
	public void fraction(String enumerator, String denominator) {
		setHelper("\\frac{" + enumerator + "}{" + denominator + "}");
	}
	
	public void dotProduct() {
		setHelper("\\cdot");
	}
	
	public void crossProduct() {
		setHelper("\\times");
	}
	
	public void subscript(String expression, String subscript) {
		setHelper(expression + "_{" + subscript + "}");
	}
	
	public void squareRoot(String expression) {
		setHelper("\\sqrt{" + expression + "}");
	}
	
	public void nthRoot(String n, String expression) {
		setHelper("\\sqrt[" + n + "]{" + expression + "}");
	}
	
	public void plusMinus() {
		setHelper("\\pm");
	}
	
	public void lessEqual() {
		setHelper("\\le");
	}
	
	public void greaterEqual() {
		setHelper("\\ge");
	}
	
	public void notEqual() {
		setHelper("\\neq");
	}
	
	public void percentage() {
		setHelper("\\%");
	}
	
	public void approximateEqual() {
		setHelper("\\approx");
	}
	
	public void equivalent() {
		setHelper("\\equiv");
	}
	
	public void alpha() {
		setHelper("\\alpha");
	}
	
	public void beta() {
		setHelper("\\beta");
	}
	
	public void delta() {
		setHelper("\\delta");
	}
	
	public void epsilon() {
		setHelper("\\epsilon");
	}
	
	public void gamma() {
		setHelper("\\gamma");
	}
	
	public void varepsilon() {
		setHelper("\\varepsilon");
	}
	
	public void zeta() {
		setHelper("\\zeta");
	}
	
	public void integral(String lowerBound, String upperBound) {
		setHelper("\\int_{" + lowerBound + "}{" + upperBound + "}");
	}
	
	
	
	
	
	
}
]]></snapshot>
  </Command>
  <Command __id="7" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:12:24 EDT 2021" docOffset="0" starttimestamp="1616620322155" timestamp="22143" />
  <Command __id="8" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:12:25 EDT 2021" docASTNodeCount="16" docActiveCodeLength="184" docExpressionCount="10" docLength="184" projectName="TaskBox" starttimestamp="1616620322155" timestamp="23389">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\mathEditor\MathExpressionImageInterface.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package components.mathEditor;

import components.observableshapes.ObservableImageInterface;

public interface MathExpressionImageInterface extends ObservableImageInterface{

}
]]></snapshot>
  </Command>
  <Command __id="9" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:12:25 EDT 2021" docOffset="0" starttimestamp="1616620322155" timestamp="23504" />
  <Command __id="11" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:12:26 EDT 2021" docOffset="0" starttimestamp="1616620322155" timestamp="24447" />
  <Command __id="12" _type="SelectTextCommand" caretOffset="1534" date="Wed Mar 24 17:12:28 EDT 2021" end="1887" start="1534" starttimestamp="1616620322155" timestamp="26495" />
  <Command __id="13" _type="MoveCaretCommand" caretOffset="1585" date="Wed Mar 24 17:12:28 EDT 2021" docOffset="1869" starttimestamp="1616620322155" timestamp="26696" />
  <Command __id="14" _type="SelectTextCommand" caretOffset="1856" date="Wed Mar 24 17:12:29 EDT 2021" end="1856" start="1522" starttimestamp="1616620322155" timestamp="27167" />
  <Command __id="15" _type="MoveCaretCommand" caretOffset="1856" date="Wed Mar 24 17:12:29 EDT 2021" docOffset="2140" starttimestamp="1616620322155" timestamp="27355" />
  <Command __id="10" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:12:26 EDT 2021" docASTNodeCount="348" docActiveCodeLength="2432" docExpressionCount="210" docLength="2432" projectName="TaskBox" starttimestamp="1616620322155" timestamp="24322">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\mathEditor\MathExpressionImage.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package components.mathEditor;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import components.listenersupport.PropertyListenerSupport;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;


@StructurePattern(StructurePatternNames.IMAGE_PATTERN)
@PropertyNames({"x", "y", "width", "height", "imageFileName"})
@EditablePropertyNames({})
public class MathExpressionImage implements MathExpressionImageInterface{
	private PropertyListenerSupport propertyListenerSupport = new PropertyListenerSupport();
	private int x, y, height, width;
	private String imageFileName;

	public MathExpressionImage(int newX, int newY, int h, int w, String name) {
		setX(newX);
		setY(newY);
		setHeight(h);
		setWidth(w);
		setImageFileName(name);
	}
	
	@Override
    public void addPropertyChangeListener(PropertyChangeListener aListener) {
		propertyListenerSupport.addElement(aListener);    
    }

	@Override
	public int getX() {
		return x;
	}

	@Override
	public void setX(int newX) {
		int oldX = x;
		x = newX;
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "x", oldX, x));
	}

	@Override
	public int getY() {
		return y;
	}

	@Override
	public void setY(int newY) {
		int oldY = y;
		y = newY;
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "y", oldY, y));
	}

	@Override
	public int getWidth() {
		return width;
	}

	@Override
	public void setWidth(int newWidth) {
		int oldWidth = width;
		width = newWidth;
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "width", oldWidth, width));
	}

	@Override
	public int getHeight() {
		return height;
	}

	@Override
	public void setHeight(int newHeight) {
		int oldHeight = height;
		height = newHeight;
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "height", oldHeight, height));
	}

	@Override
	public String getImageFileName() {
		return imageFileName;
	}

	@Override
	public void setImageFileName(String newName) {
		String oldName = imageFileName;
		imageFileName = newName;
		propertyListenerSupport.notifyAllListeners(
				new PropertyChangeEvent(this, "imageFileName", oldName, imageFileName));
	}
}
	
]]></snapshot>
  </Command>
  <Command __id="16" _type="MoveCaretCommand" caretOffset="1286" date="Wed Mar 24 17:12:33 EDT 2021" docOffset="1570" starttimestamp="1616620322155" timestamp="31805" />
  <Command __id="17" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:12:39 EDT 2021" docASTNodeCount="16" docActiveCodeLength="184" docExpressionCount="10" docLength="184" projectName="TaskBox" starttimestamp="1616620322155" timestamp="37181">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\mathEditor\MathExpressionImageInterface.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package components.mathEditor;¶¶import components.observableshapes.ObservableImageInterface;¶¶public interface MathExpressionImageInterface extends ObservableImageInterface{¶¶}¶")]]]></diff>
  </Command>
  <Command __id="18" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:12:39 EDT 2021" docOffset="0" starttimestamp="1616620322155" timestamp="37272" />
  <Command __id="20" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:12:43 EDT 2021" docOffset="4" starttimestamp="1616620322155" timestamp="41182" />
  <Command __id="21" _type="MoveCaretCommand" caretOffset="1116" date="Wed Mar 24 17:13:10 EDT 2021" docOffset="2604" starttimestamp="1616620322155" timestamp="68629" />
  <Command __id="22" _type="SelectTextCommand" caretOffset="953" date="Wed Mar 24 17:13:12 EDT 2021" end="953" start="290" starttimestamp="1616620322155" timestamp="70722" />
  <Command __id="23" _type="MoveCaretCommand" caretOffset="953" date="Wed Mar 24 17:13:13 EDT 2021" docOffset="2441" starttimestamp="1616620322155" timestamp="70872" />
  <Command __id="24" _type="MoveCaretCommand" caretOffset="2443" date="Wed Mar 24 17:13:16 EDT 2021" docOffset="3931" starttimestamp="1616620322155" timestamp="74662" />
  <Command __id="19" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:12:43 EDT 2021" docASTNodeCount="513" docActiveCodeLength="2876" docExpressionCount="375" docLength="3983" projectName="TaskBox" starttimestamp="1616620322155" timestamp="41009">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\mathEditor\LatexExample.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"/*¶ * Simple Java LaTex example¶ * http://www.heatonresearch.com/¶ * ¶ * Copyright 2013 Heaton Research, Inc.¶ *¶ * Licensed under the Apache License, Version 2.0 (the "License");¶ * you may not use this file except in compliance with the License.¶ * You may obtain a copy of the License at¶ *¶ *     http://www.apache.org/licenses/LICENSE-2.0¶ *¶ * Unless required by applicable law or agreed to in writing, software¶ * distributed under the License is distributed on an "AS IS" BASIS,¶ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.¶ * See the License for the specific language governing permissions and¶ * limitations under the License.¶ *   ¶ * For more information on Heaton Research copyrights, licenses ¶ * and trademarks visit:¶ * http://www.heatonresearch.com/copyright¶ */¶¶package components.mathEditor;¶¶import java.awt.BorderLayout;¶import java.awt.Color;¶import java.awt.Container;¶import java.awt.Graphics;¶import java.awt.Graphics2D;¶import java.awt.GridLayout;¶import java.awt.Insets;¶import java.awt.event.ActionEvent;¶import java.awt.event.ActionListener;¶import java.awt.image.BufferedImage;¶import java.io.File;¶¶import javax.imageio.ImageIO;¶import javax.swing.JButton;¶import javax.swing.JFrame;¶import javax.swing.JLabel;¶import javax.swing.JOptionPane;¶import javax.swing.JPanel;¶import javax.swing.JScrollPane;¶import javax.swing.JTextArea;¶¶import org.scilab.forge.jlatexmath.TeXConstants;¶import org.scilab.forge.jlatexmath.TeXFormula;¶import org.scilab.forge.jlatexmath.TeXIcon;¶¶public class LatexExample extends JFrame implements ActionListener {¶	¶	private JTextArea latexSource;¶	private JButton btnRender;¶	private JPanel drawingArea;¶¶	public LatexExample() {¶		this.setTitle("JLatexMath Example");¶		this.setSize(500, 500);¶		Container content = this.getContentPane();¶		content.setLayout(new GridLayout(2, 1));¶		this.latexSource = new JTextArea();¶		¶		JPanel editorArea = new JPanel();¶		editorArea.setLayout(new BorderLayout());¶		editorArea.add(new JScrollPane(this.latexSource),BorderLayout.CENTER);¶		editorArea.add(btnRender = new JButton("Render"),BorderLayout.SOUTH);		¶		¶		content.add(editorArea);¶		content.add(this.drawingArea = new JPanel());		¶		this.btnRender.addActionListener(this);¶		¶		this.latexSource.setText("x=\\frac{-b \\pm \\sqrt {b^2-4ac}}{2a}");¶	}¶¶	public void render() {¶		try {¶			// get the text¶			String latex = this.latexSource.getText();¶			¶			// create a formula¶			TeXFormula formula = new TeXFormula(latex);¶			¶			¶			// render the formla to an icon of the same size as the formula.¶			TeXIcon icon = formula¶					.createTeXIcon(TeXConstants.STYLE_DISPLAY, 20);¶			¶			// insert a border ¶			icon.setInsets(new Insets(5, 5, 5, 5));¶¶			// now create an actual image of the rendered equation¶			BufferedImage image = new BufferedImage(icon.getIconWidth(),¶					icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);¶			Graphics2D g2 = image.createGraphics();¶			g2.setColor(Color.white);¶			g2.fillRect(0, 0, icon.getIconWidth(), icon.getIconHeight());¶			JLabel jl = new JLabel();¶			jl.setForeground(new Color(0, 0, 0));¶			icon.paintIcon(jl, g2, 0, 0);¶			// at this point the image is created, you could also save it with ImageIO¶			¶			File outputfile = new File("image.png");¶			ImageIO.write(image, "png", outputfile);¶			¶			// now draw it to the screen			¶			Graphics g = this.drawingArea.getGraphics();¶			g.drawImage(image,0,0,null);¶		} catch (Exception ex) {¶			ex.printStackTrace();¶			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error",¶					JOptionPane.INFORMATION_MESSAGE);		¶		}¶¶	}¶¶	public static void main(String[] args) {¶		LatexExample frame = new LatexExample();		¶		frame.setVisible(true);¶	}¶¶	@Override¶	public void actionPerformed(ActionEvent e) {¶		if( e.getSource()==this.btnRender ) {¶			render();¶		}¶		¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="25" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 24 17:13:17 EDT 2021" starttimestamp="1616620322155" timestamp="75734" />
  <Command __id="26" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 24 17:13:18 EDT 2021" starttimestamp="1616620322155" timestamp="75908" />
  <DocumentChange __id="27" _type="Insert" date="Wed Mar 24 17:13:21 EDT 2021" docASTNodeCount="513" docActiveCodeLength="2877" docExpressionCount="375" docLength="3984" length="1" offset="3933" starttimestamp="1616620322155" timestamp="79767">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="28" _type="InsertStringCommand" date="Wed Mar 24 17:13:21 EDT 2021" starttimestamp="1616620322155" timestamp="79773" timestamp2="79773">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="29" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Mar 24 17:13:22 EDT 2021" starttimestamp="1616620322155" timestamp="79972" />
  <Command __id="30" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Mar 24 17:13:22 EDT 2021" starttimestamp="1616620322155" timestamp="80138" />
  <Command __id="31" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Mar 24 17:13:22 EDT 2021" starttimestamp="1616620322155" timestamp="80290" />
  <Command __id="39" _type="ShellCommand" date="Wed Mar 24 17:13:45 EDT 2021" starttimestamp="1616620322155" timestamp="103275" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="32" _type="Insert" date="Wed Mar 24 17:13:22 EDT 2021" docASTNodeCount="513" docActiveCodeLength="2878" docExpressionCount="375" docLength="3985" length="1" offset="3931" starttimestamp="1616620322155" timestamp="80754">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="40" _type="MoveCaretCommand" caretOffset="1058" date="Wed Mar 24 17:13:49 EDT 2021" docOffset="2546" starttimestamp="1616620322155" timestamp="107144" />
  <Command __id="41" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:14:17 EDT 2021" docASTNodeCount="143" docActiveCodeLength="942" docExpressionCount="80" docLength="942" projectName="TaskBox" starttimestamp="1616620322155" timestamp="135716">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\listenersupport\PropertyListenerSupport.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package components.listenersupport;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;

public class PropertyListenerSupport implements PropertyListenerSupportInterface{
	
	private List<PropertyChangeListener> contents = new ArrayList<PropertyChangeListener> ();
	

	@Override
	public int size() {
		return contents.size();
	}

	@Override
	public PropertyChangeListener elementAt(int index) {
		return contents.get(index);
	}


	@Override
	public synchronized void addElement(PropertyChangeListener l) {
		contents.add(l);
	}

	@Override
	public synchronized void notifyAllListeners(PropertyChangeEvent event) {
		for (PropertyChangeListener l : contents) {
			l.propertyChange(event);
		}
	}

	@Override
	public synchronized void removeElement(PropertyChangeListener l) {
		contents.remove(l);
	}

	@Override
	public boolean isFull() {
		return false;
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="42" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:14:17 EDT 2021" docOffset="0" starttimestamp="1616620322155" timestamp="135836" />
  <Command __id="43" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:14:19 EDT 2021" docASTNodeCount="513" docActiveCodeLength="2878" docExpressionCount="375" docLength="3985" projectName="TaskBox" starttimestamp="1616620322155" timestamp="137661">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\mathEditor\LatexExample.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"/*¶ * Simple Java LaTex example¶ * http://www.heatonresearch.com/¶ * ¶ * Copyright 2013 Heaton Research, Inc.¶ *¶ * Licensed under the Apache License, Version 2.0 (the "License");¶ * you may not use this file except in compliance with the License.¶ * You may obtain a copy of the License at¶ *¶ *     http://www.apache.org/licenses/LICENSE-2.0¶ *¶ * Unless required by applicable law or agreed to in writing, software¶ * distributed under the License is distributed on an "AS IS" BASIS,¶ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.¶ * See the License for the specific language governing permissions and¶ * limitations under the License.¶ *   ¶ * For more information on Heaton Research copyrights, licenses ¶ * and trademarks visit:¶ * http://www.heatonresearch.com/copyright¶ */¶¶package components.mathEditor;¶¶import java.awt.BorderLayout;¶import java.awt.Color;¶import java.awt.Container;¶import java.awt.Graphics;¶import java.awt.Graphics2D;¶import java.awt.GridLayout;¶import java.awt.Insets;¶import java.awt.event.ActionEvent;¶import java.awt.event.ActionListener;¶import java.awt.image.BufferedImage;¶import java.io.File;¶¶import javax.imageio.ImageIO;¶import javax.swing.JButton;¶import javax.swing.JFrame;¶import javax.swing.JLabel;¶import javax.swing.JOptionPane;¶import javax.swing.JPanel;¶import javax.swing.JScrollPane;¶import javax.swing.JTextArea;¶¶import org.scilab.forge.jlatexmath.TeXConstants;¶import org.scilab.forge.jlatexmath.TeXFormula;¶import org.scilab.forge.jlatexmath.TeXIcon;¶¶public class LatexExample extends JFrame implements ActionListener {¶	¶	private JTextArea latexSource;¶	private JButton btnRender;¶	private JPanel drawingArea;¶¶	public LatexExample() {¶		this.setTitle("JLatexMath Example");¶		this.setSize(500, 500);¶		Container content = this.getContentPane();¶		content.setLayout(new GridLayout(2, 1));¶		this.latexSource = new JTextArea();¶		¶		JPanel editorArea = new JPanel();¶		editorArea.setLayout(new BorderLayout());¶		editorArea.add(new JScrollPane(this.latexSource),BorderLayout.CENTER);¶		editorArea.add(btnRender = new JButton("Render"),BorderLayout.SOUTH);		¶		¶		content.add(editorArea);¶		content.add(this.drawingArea = new JPanel());		¶		this.btnRender.addActionListener(this);¶		¶		this.latexSource.setText("x=\\frac{-b \\pm \\sqrt {b^2-4ac}}{2a}");¶	}¶¶	public void render() {¶		try {¶			// get the text¶			String latex = this.latexSource.getText();¶			¶			// create a formula¶			TeXFormula formula = new TeXFormula(latex);¶			¶			¶			// render the formla to an icon of the same size as the formula.¶			TeXIcon icon = formula¶					.createTeXIcon(TeXConstants.STYLE_DISPLAY, 20);¶			¶			// insert a border ¶			icon.setInsets(new Insets(5, 5, 5, 5));¶¶			// now create an actual image of the rendered equation¶			BufferedImage image = new BufferedImage(icon.getIconWidth(),¶					icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);¶			Graphics2D g2 = image.createGraphics();¶			g2.setColor(Color.white);¶			g2.fillRect(0, 0, icon.getIconWidth(), icon.getIconHeight());¶			JLabel jl = new JLabel();¶			jl.setForeground(new Color(0, 0, 0));¶			icon.paintIcon(jl, g2, 0, 0);¶			// at this point the image is created, you could also save it with ImageIO¶			¶			File outputfile = new File("image.png");¶			ImageIO.write(image, "png", outputfile);¶			¶			// now draw it to the screen			¶			Graphics g = this.drawingArea.getGraphics();¶			g.drawImage(image,0,0,null);¶		} catch (Exception ex) {¶			ex.printStackTrace();¶			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error",¶					JOptionPane.INFORMATION_MESSAGE);		¶		}¶¶	}¶¶	public static void main(String[] args) {¶		LatexExample frame = new LatexExample();		¶		frame.setVisible(true);¶	}¶¶	@Override¶	public void actionPerformed(ActionEvent e) {¶		if( e.getSource()"), Diff(INSERT," "), Diff(EQUAL,"=="), Diff(INSERT," "), Diff(EQUAL,"this.btnRender ) {¶			render();¶		}¶		¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[/*
 * Simple Java LaTex example
 * http://www.heatonresearch.com/
 * 
 * Copyright 2013 Heaton Research, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *   
 * For more information on Heaton Research copyrights, licenses 
 * and trademarks visit:
 * http://www.heatonresearch.com/copyright
 */

package components.mathEditor;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import org.scilab.forge.jlatexmath.TeXConstants;
import org.scilab.forge.jlatexmath.TeXFormula;
import org.scilab.forge.jlatexmath.TeXIcon;

public class LatexExample extends JFrame implements ActionListener {
	
	private JTextArea latexSource;
	private JButton btnRender;
	private JPanel drawingArea;

	public LatexExample() {
		this.setTitle("JLatexMath Example");
		this.setSize(500, 500);
		Container content = this.getContentPane();
		content.setLayout(new GridLayout(2, 1));
		this.latexSource = new JTextArea();
		
		JPanel editorArea = new JPanel();
		editorArea.setLayout(new BorderLayout());
		editorArea.add(new JScrollPane(this.latexSource),BorderLayout.CENTER);
		editorArea.add(btnRender = new JButton("Render"),BorderLayout.SOUTH);		
		
		content.add(editorArea);
		content.add(this.drawingArea = new JPanel());		
		this.btnRender.addActionListener(this);
		
		this.latexSource.setText("x=\\frac{-b \\pm \\sqrt {b^2-4ac}}{2a}");
	}

	public void render() {
		try {
			// get the text
			String latex = this.latexSource.getText();
			
			// create a formula
			TeXFormula formula = new TeXFormula(latex);
			
			
			// render the formla to an icon of the same size as the formula.
			TeXIcon icon = formula
					.createTeXIcon(TeXConstants.STYLE_DISPLAY, 20);
			
			// insert a border 
			icon.setInsets(new Insets(5, 5, 5, 5));

			// now create an actual image of the rendered equation
			BufferedImage image = new BufferedImage(icon.getIconWidth(),
					icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
			Graphics2D g2 = image.createGraphics();
			g2.setColor(Color.white);
			g2.fillRect(0, 0, icon.getIconWidth(), icon.getIconHeight());
			JLabel jl = new JLabel();
			jl.setForeground(new Color(0, 0, 0));
			icon.paintIcon(jl, g2, 0, 0);
			// at this point the image is created, you could also save it with ImageIO
			
			File outputfile = new File("image.png");
			ImageIO.write(image, "png", outputfile);
			
			// now draw it to the screen			
			Graphics g = this.drawingArea.getGraphics();
			g.drawImage(image,0,0,null);
		} catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Error",
					JOptionPane.INFORMATION_MESSAGE);		
		}

	}

	public static void main(String[] args) {
		LatexExample frame = new LatexExample();		
		frame.setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if( e.getSource() == this.btnRender ) {
			render();
		}
		
	}
}
]]></snapshot>
  </Command>
  <Command __id="44" _type="MoveCaretCommand" caretOffset="1058" date="Wed Mar 24 17:14:19 EDT 2021" docOffset="2546" starttimestamp="1616620322155" timestamp="137760" />
  <Command __id="46" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:14:35 EDT 2021" docOffset="0" starttimestamp="1616620322155" timestamp="153502" />
  <Command __id="45" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:14:35 EDT 2021" docASTNodeCount="77" docActiveCodeLength="393" docExpressionCount="45" docLength="427" projectName="TaskBox" starttimestamp="1616620322155" timestamp="153400">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\exporter\Exporter.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package exporter;

import java.io.File;
import java.io.IOException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class Exporter {
	public static void export(Object o, String dir) {
		ObjectMapper mapper = new ObjectMapper();
		File aFile = new File(dir);
		try {
			mapper.writeValue(aFile, o);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="47" _type="MoveCaretCommand" caretOffset="343" date="Wed Mar 24 17:15:00 EDT 2021" docOffset="425" starttimestamp="1616620322155" timestamp="178532" />
  <Command __id="48" _type="SelectTextCommand" caretOffset="340" date="Wed Mar 24 17:15:01 EDT 2021" end="340" start="205" starttimestamp="1616620322155" timestamp="179052" />
  <Command __id="49" _type="MoveCaretCommand" caretOffset="340" date="Wed Mar 24 17:15:01 EDT 2021" docOffset="422" starttimestamp="1616620322155" timestamp="179208" />
  <Command __id="50" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:15:48 EDT 2021" docASTNodeCount="296" docActiveCodeLength="2049" docExpressionCount="181" docLength="2049" projectName="TaskBox" starttimestamp="1616620322155" timestamp="226140">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\curve\point\CurvePoint.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package components.curve.point;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import components.listenersupport.PropertyListenerSupport;
import components.observableshapes.ObservablePointInterface;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;


@StructurePattern(StructurePatternNames.POINT_PATTERN)
@PropertyNames({"x", "y", "radius"})
@EditablePropertyNames({"x", "y"})
public class CurvePoint implements ObservablePointInterface{
	private int x, y;
	private double angle, radius;
	private PropertyListenerSupport propertyListenerSupport = new PropertyListenerSupport();
	
	
	public CurvePoint(int newX, int newY, int newRadius) {
		setX(newX);
		setY(newY);
		setRadius(newRadius);
	}
	
	@Override
	public int getX() {
		return x;
	}

	@Override
	public void setX(int newX) {
		int oldX = x;
		x = newX;
		propertyListenerSupport.notifyAllListeners(new PropertyChangeEvent(this, "x", oldX, x));
	}

	@Override
	public int getY() {
		return y;
	}

	@Override
	public void setY(int newY) {
		int oldY = y;
		y = newY;
		propertyListenerSupport.notifyAllListeners(new PropertyChangeEvent(this, "y", oldY, y));
	}

	@Override
	public void addPropertyChangeListener(PropertyChangeListener aListener) {
		propertyListenerSupport.addElement(aListener);
	}

	@Override
	public double getAngle() {
		return angle;
	}

	@Override
	public void setAngle(double newAngle) {
		double oldAngle = angle;
		angle = newAngle;
		propertyListenerSupport.notifyAllListeners(new PropertyChangeEvent(this, "angle", oldAngle, angle));
	}

	@Override
	public double getRadius() {
		return radius;
	}

	@Override
	public void setRadius(double newRadius) {
		double oldRadius = radius;
		radius = newRadius;
		propertyListenerSupport.notifyAllListeners(new PropertyChangeEvent(this, "radius", oldRadius, radius));
	}



}
]]></snapshot>
  </Command>
  <Command __id="51" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:15:48 EDT 2021" docOffset="0" starttimestamp="1616620322155" timestamp="226247" />
  <Command __id="52" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:16:45 EDT 2021" docASTNodeCount="119" docActiveCodeLength="846" docExpressionCount="61" docLength="846" projectName="TaskBox" starttimestamp="1616620322155" timestamp="283211">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\composedGraph\ComposedGraphInterface.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package components.composedGraph;

import java.util.List;

import components.observableshapes.ObservableLineInterface;
import components.observableshapes.ObservablePointInterface;
import components.plane.plane.PlaneInterface;

public interface ComposedGraphInterface {
	void deleteLine(ObservableLineInterface aLine);
	void delelePoint(ObservablePointInterface aPoint);
	void addLine(ObservablePointInterface aPoint);
	void startPoint(ObservablePointInterface aPoint);
	void addPoint();
	PlaneInterface getPlane();
	List<ObservableLineInterface> getLines();
	void setLines(List<ObservableLineInterface> newLines);
	List<ObservablePointInterface> getPoints();
	void setPoints(List<ObservablePointInterface> newPoints);
	void fit();
	List<ObservableLineInterface> getFittingLines();
	void addLines();
	void deleteLines();
}
]]></snapshot>
  </Command>
  <Command __id="53" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:16:45 EDT 2021" docOffset="0" starttimestamp="1616620322155" timestamp="283327" />
  <Command __id="67" _type="ShellCommand" date="Wed Mar 24 17:18:43 EDT 2021" starttimestamp="1616620322155" timestamp="401489" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="54" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:16:45 EDT 2021" docASTNodeCount="917" docActiveCodeLength="5464" docExpressionCount="656" docLength="5464" projectName="TaskBox" starttimestamp="1616620322155" timestamp="283639">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\components\composedGraph\ComposedGraph.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package components.composedGraph;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;

import components.curve.fitting.Plotter;
import components.curve.line.CurveLine;
import components.curve.point.CurvePoint;
import components.observableshapes.ObservableLineInterface;
import components.observableshapes.ObservablePointInterface;
import components.plane.plane.Plane;
import components.plane.plane.PlaneInterface;
import javafx.util.Pair;
import util.annotations.Column;
import util.annotations.ComponentWidth;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PreferredWidgetClass;
import util.annotations.PropertyNames;
import util.annotations.Row;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"points", "lines", "plane", "fittingLines"})
@EditablePropertyNames({"points"})
public class ComposedGraph implements ComposedGraphInterface{
	private int x, y;
	private List<ObservablePointInterface> points = new ArrayList<ObservablePointInterface>();
	private List<ObservableLineInterface> lines = new ArrayList<ObservableLineInterface>();
	private List<ObservableLineInterface> fittingLines = new ArrayList<ObservableLineInterface>();
	private ObservablePointInterface startPoint, prevPoint;
	private PlaneInterface plane;
	private List<Pair<ObservablePointInterface, ObservableLineInterface>> pairs = new ArrayList<Pair<ObservablePointInterface, ObservableLineInterface>> ();
	public static final int RADIUS = 5;
	private Plotter plotter = new Plotter(this);
	
	
	public ComposedGraph(int newX, int newY) {
		plane = new Plane(newX, newY);
		x = newX;
		y = newY;
	}
	
	@Override
	public List<ObservablePointInterface> getPoints() {
		return points;
	}
	
	@Override
	public List<ObservableLineInterface> getLines(){
		return lines;
	}
	
	@Override
	@Row(0)
	@Column(0)
	@ComponentWidth(100)
	public PlaneInterface getPlane() {
		return plane;
	}
	
	@Override
	@PreferredWidgetClass(JButton.class)
	@Label("Add Point")
	@Row(1)
	@Column(0)
	@ComponentWidth(100)
	public void addPoint() {
		points.add(new CurvePoint(x, y, RADIUS));
	}
	
	@Override
	@PreferredWidgetClass(JButton.class)
	@Label("Set Start Point")
	@Row(1)
	@Column(1)
	@ComponentWidth(100)
	public void startPoint(ObservablePointInterface aPoint) {
		startPoint = aPoint;
	}
	
	@Override
	@PreferredWidgetClass(JButton.class)
	@Label("Add Line")
	@Row(2)
	@Column(0)
	@ComponentWidth(100)
	public void addLine(ObservablePointInterface aPoint) {
		if (startPoint == null) {
			startPoint = points.get(0);
		}
		if (prevPoint == null) {
			prevPoint = startPoint;
		}
		if (prevPoint == aPoint) {
			return;
		}
		ObservableLineInterface newLine = new CurveLine((int) (prevPoint.getX() + prevPoint.getRadius()), 
				(int) (prevPoint.getY() + prevPoint.getRadius()), 
				(int) (aPoint.getX() + aPoint.getRadius() - prevPoint.getX() - prevPoint.getRadius()), 
				(int) (aPoint.getY() + aPoint.getRadius() - prevPoint.getY() - prevPoint.getRadius()),
				Color.BLACK
				);
		lines.add(newLine);
		pairs.add(new Pair<ObservablePointInterface, ObservableLineInterface> (aPoint, newLine));
		pairs.add(new Pair<ObservablePointInterface, ObservableLineInterface> (prevPoint, newLine));
		prevPoint = aPoint;
		
	}
	
	@Override
	@PreferredWidgetClass(JButton.class)
	@Label("Delete Line")
	@Row(2)
	@Column(2)
	@ComponentWidth(100)
	public void deleteLine(ObservableLineInterface aLine) {
		lines.remove(aLine);
	}
	
	@Override
	@PreferredWidgetClass(JButton.class)
	@Label("Delete Point")
	@Row(1)
	@Column(2)
	@ComponentWidth(100)
	public void delelePoint(ObservablePointInterface aPoint) {
		if (startPoint == aPoint) {
			startPoint = null;
		}
		if (prevPoint == aPoint) {
			prevPoint = null;
		}
		for (Pair <ObservablePointInterface, ObservableLineInterface> pair : pairs) {
			if (pair.getKey() == aPoint) {
				deleteLine(pair.getValue());
			}
		}
		points.remove(aPoint);
	}

	@Override
	public void setLines(List<ObservableLineInterface> newLines) {
		lines = newLines;
	}

	@Override
	public void setPoints(List<ObservablePointInterface> newPoints) {
		points = newPoints;
	}

	@Override
	@PreferredWidgetClass(JButton.class)
	@Label("Fit")
	@Row(3)
	@Column(1)
	@ComponentWidth(100)
	public void fit() {
		if (points.size() == 0) return;
		plotter.plot();
	}

	@Override
	public List<ObservableLineInterface> getFittingLines() {
		return fittingLines;
	}

	@Override
	@PreferredWidgetClass(JButton.class)
	@Label("Add Line Auto")
	@Row(2)
	@Column(1)
	@ComponentWidth(100)
	public void addLines() {
		if (points.size() < 2) return;
		lines.clear();
		for (int i = 1; i < points.size(); i ++) {
			lines.add(new CurveLine(
					(int) (points.get(i - 1).getX() + points.get(i - 1).getRadius()), 
					(int) (points.get(i - 1).getY() + points.get(i - 1).getRadius()), 
					points.get(i).getX() - points.get(i - 1).getX(), 
					points.get(i).getY() - points.get(i - 1).getY(), 
					Color.BLACK));
		}
	}

	@Override
	@PreferredWidgetClass(JButton.class)
	@Label("Delete Lines")
	@Row(3)
	@Column(0)
	@ComponentWidth(100)
	public void deleteLines() {
		lines.clear();
	}
}
]]></snapshot>
  </Command>
  <Command __id="68" _type="ShellCommand" date="Wed Mar 24 17:27:26 EDT 2021" starttimestamp="1616620322155" timestamp="924595" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="69" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:27:27 EDT 2021" docASTNodeCount="123" docActiveCodeLength="708" docExpressionCount="82" docLength="708" projectName="TaskBox" starttimestamp="1616620322155" timestamp="925647">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\main\MathMain.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package main;

import java.util.Vector;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.uiFrame;
import bus.uigen.oadapters.ClassAdapter;
import bus.uigen.oadapters.ObjectAdapter;
import components.mathEditor.MathEditorPanel;

public class MathMain {

	public static void main(String[] args) {
		MathEditorPanel panel = new MathEditorPanel();
		
		uiFrame frame = (uiFrame) ObjectEditor.edit(panel);
		
		ClassAdapter adapter = (ClassAdapter) frame.getTopAdapter();
		
		Vector<ObjectAdapter> children = adapter.getChildrenVector();
		
		for (ObjectAdapter o : children) {
			System.out.println(o.getUIComponent().getPhysicalComponent());
		}
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="70" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:27:27 EDT 2021" docOffset="0" starttimestamp="1616620322155" timestamp="925759" />
  <Command __id="72" _type="MoveCaretCommand" caretOffset="0" date="Wed Mar 24 17:27:31 EDT 2021" docOffset="0" starttimestamp="1616620322155" timestamp="929346" />
  <Command __id="73" _type="MoveCaretCommand" caretOffset="344" date="Wed Mar 24 17:27:32 EDT 2021" docOffset="573" starttimestamp="1616620322155" timestamp="930012" />
  <Command __id="74" _type="SelectTextCommand" caretOffset="468" date="Wed Mar 24 17:27:32 EDT 2021" end="468" start="324" starttimestamp="1616620322155" timestamp="930473" />
  <Command __id="75" _type="MoveCaretCommand" caretOffset="468" date="Wed Mar 24 17:27:32 EDT 2021" docOffset="697" starttimestamp="1616620322155" timestamp="930628" />
  <Command __id="76" _type="MoveCaretCommand" caretOffset="459" date="Wed Mar 24 17:27:33 EDT 2021" docOffset="688" starttimestamp="1616620322155" timestamp="930864" />
  <Command __id="77" _type="MoveCaretCommand" caretOffset="464" date="Wed Mar 24 17:27:33 EDT 2021" docOffset="693" starttimestamp="1616620322155" timestamp="931095" />
  <Command __id="71" _type="DiffBasedFileOpenCommand" date="Wed Mar 24 17:27:31 EDT 2021" docASTNodeCount="128" docActiveCodeLength="773" docExpressionCount="93" docLength="871" projectName="TaskBox" starttimestamp="1616620322155" timestamp="929231">
    <filePath><![CDATA[C:\Users\leleo\eclipse-workspace\TaskBox\src\main\TaskPanel.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package main;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.attributes.AttributeNames;
import components.mainpanel.MainPanel;
import components.mainpanel.MainPanelInterface;
import components.page.pages.Page;
import exporter.Exporter;

public class TaskPanel {

	public static void main(String[] args) {
		MainPanelInterface panel = new MainPanel();
		panel.addPage(new Page("Example task I", "", 0));
		panel.addPage(new Page("Example task II", "", 1));
		
		ObjectEditor.setPropertyAttribute(Page.class, "answer", AttributeNames.SCROLLED, true);
//		ObjectEditor.setMethodAttribute(ComposedGraph.class, "addLine", AttributeNames.LABEL, "Test");
		
		OEFrame frame = ObjectEditor.edit(panel);
		
		
		
		
		frame.setSize(700, 1000);
		frame.setLocation(0, 0);
		Exporter.export(panel, "example.json");

	}

}
]]></snapshot>
  </Command>
  <Command __id="78" _type="MoveCaretCommand" caretOffset="368" date="Wed Mar 24 17:27:40 EDT 2021" docOffset="597" starttimestamp="1616620322155" timestamp="938384" />
  <DocumentChange __id="79" _type="Delete" date="Wed Mar 24 17:27:41 EDT 2021" docASTNodeCount="140" docActiveCodeLength="869" docExpressionCount="103" docLength="869" endLine="18" length="2" offset="595" repeat="2" startLine="18" starttimestamp="1616620322155" timestamp="939402" timestamp2="939530">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="80" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:27:41 EDT 2021" starttimestamp="1616620322155" timestamp="939412" />
  <Command __id="82" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:27:41 EDT 2021" starttimestamp="1616620322155" timestamp="939532" />
  <Command __id="83" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 24 17:27:41 EDT 2021" starttimestamp="1616620322155" timestamp="939838" />
  <Command __id="84" _type="EclipseCommand" commandID="" date="Wed Mar 24 17:27:42 EDT 2021" starttimestamp="1616620322155" timestamp="940591" />
  <Command __id="85" _type="EclipseCommand" commandID="" date="Wed Mar 24 17:27:42 EDT 2021" starttimestamp="1616620322155" timestamp="940634" />
  <Command __id="86" _type="MoveCaretCommand" caretOffset="452" date="Wed Mar 24 17:27:43 EDT 2021" docOffset="681" starttimestamp="1616620322155" timestamp="941144" />
  <Command __id="87" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.toggleOverwrite" date="Wed Mar 24 17:27:43 EDT 2021" starttimestamp="1616620322155" timestamp="941685" />
  <DocumentChange __id="88" _type="Delete" date="Wed Mar 24 17:27:44 EDT 2021" docASTNodeCount="138" docActiveCodeLength="863" docExpressionCount="101" docLength="863" endLine="18" length="6" offset="675" repeat="6" startLine="18" starttimestamp="1616620322155" timestamp="942048" timestamp2="943053">
    <text><![CDATA[.LABEL]]></text>
  </DocumentChange>
  <Command __id="89" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:27:44 EDT 2021" starttimestamp="1616620322155" timestamp="942051" />
  <Command __id="91" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:27:44 EDT 2021" starttimestamp="1616620322155" timestamp="942266" />
  <Command __id="93" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:27:44 EDT 2021" starttimestamp="1616620322155" timestamp="942427" />
  <Command __id="95" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:27:44 EDT 2021" starttimestamp="1616620322155" timestamp="942566" />
  <Command __id="97" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:27:44 EDT 2021" starttimestamp="1616620322155" timestamp="942711" />
  <Command __id="99" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:27:45 EDT 2021" starttimestamp="1616620322155" timestamp="943054" />
  <Command __id="100" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.toggleOverwrite" date="Wed Mar 24 17:27:45 EDT 2021" starttimestamp="1616620322155" timestamp="943618" />
  <DocumentChange __id="101" _type="Insert" date="Wed Mar 24 17:27:46 EDT 2021" docASTNodeCount="140" docActiveCodeLength="866" docExpressionCount="103" docLength="866" length="3" offset="675" repeat="3" starttimestamp="1616620322155" timestamp="944667" timestamp2="945745">
    <text><![CDATA[.LA]]></text>
  </DocumentChange>
  <Command __id="102" _type="InsertStringCommand" date="Wed Mar 24 17:27:46 EDT 2021" starttimestamp="1616620322155" timestamp="944669" timestamp2="944669">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="103" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Mar 24 17:27:47 EDT 2021" start_end="START" starttimestamp="1616620322155" timestamp="944974" />
  <DocumentChange __id="106" _type="Delete" date="Wed Mar 24 17:28:02 EDT 2021" docASTNodeCount="138" docActiveCodeLength="863" docExpressionCount="101" docLength="863" endLine="18" length="3" offset="675" repeat="3" startLine="18" starttimestamp="1616620322155" timestamp="960262" timestamp2="960760">
    <text><![CDATA[.LA]]></text>
  </DocumentChange>
  <Command __id="109" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Mar 24 17:28:03 EDT 2021" start_end="END" starttimestamp="1616620322155" timestamp="961556" />
  <DocumentChange __id="110" _type="Replace" date="Wed Mar 24 17:28:03 EDT 2021" docASTNodeCount="140" docActiveCodeLength="864" docExpressionCount="102" docLength="864" endLine="18" insertionLength="15" int_docASTNodeCount="137" int_docActiveCodeLength="849" int_docExpressionCount="100" int_docLength="849" length="14" offset="661" startLine="18" starttimestamp="1616620322155" timestamp="961561">
    <deletedText><![CDATA[AttributeNames]]></deletedText>
    <insertedText><![CDATA[AttributeNames.]]></insertedText>
  </DocumentChange>
  <Command __id="111" _type="InsertStringCommand" date="Wed Mar 24 17:28:03 EDT 2021" starttimestamp="1616620322155" timestamp="961568" timestamp2="961568">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="112" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Mar 24 17:28:03 EDT 2021" start_end="START" starttimestamp="1616620322155" timestamp="961571" />
  <DocumentChange __id="113" _type="Insert" date="Wed Mar 24 17:28:04 EDT 2021" docASTNodeCount="140" docActiveCodeLength="866" docExpressionCount="103" docLength="866" length="2" offset="676" repeat="2" starttimestamp="1616620322155" timestamp="962506" timestamp2="962868">
    <text><![CDATA[UC]]></text>
  </DocumentChange>
  <Command __id="115" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Mar 24 17:28:05 EDT 2021" start_end="END" starttimestamp="1616620322155" timestamp="963181" />
  <DocumentChange __id="116" _type="Replace" date="Wed Mar 24 17:28:05 EDT 2021" docASTNodeCount="141" docActiveCodeLength="884" docExpressionCount="104" docLength="884" endLine="18" insertionLength="20" int_docASTNodeCount="140" int_docActiveCodeLength="864" int_docExpressionCount="102" int_docLength="864" length="2" offset="676" startLine="18" starttimestamp="1616620322155" timestamp="963183">
    <deletedText><![CDATA[UC]]></deletedText>
    <insertedText><![CDATA[COLUMN_PREFIX_COLOR=]]></insertedText>
  </DocumentChange>
  <Command __id="117" _type="InsertStringCommand" date="Wed Mar 24 17:28:05 EDT 2021" starttimestamp="1616620322155" timestamp="963186" timestamp2="963186">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="118" _type="Delete" date="Wed Mar 24 17:28:05 EDT 2021" docASTNodeCount="138" docActiveCodeLength="863" docExpressionCount="101" docLength="863" endLine="18" length="21" offset="675" repeat="21" startLine="18" starttimestamp="1616620322155" timestamp="963604" timestamp2="965076">
    <text><![CDATA[.COLUMN_PREFIX_COLOR=]]></text>
  </DocumentChange>
  <Command __id="119" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:05 EDT 2021" starttimestamp="1616620322155" timestamp="963606" />
  <Command __id="121" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:05 EDT 2021" starttimestamp="1616620322155" timestamp="963727" />
  <Command __id="123" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964234" />
  <Command __id="125" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964266" />
  <Command __id="127" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964298" />
  <Command __id="129" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964327" />
  <Command __id="131" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964373" />
  <Command __id="133" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964404" />
  <Command __id="135" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964434" />
  <Command __id="137" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964467" />
  <Command __id="139" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964498" />
  <Command __id="141" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964530" />
  <Command __id="143" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964563" />
  <Command __id="145" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964592" />
  <Command __id="147" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964623" />
  <Command __id="149" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964673" />
  <Command __id="151" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964701" />
  <Command __id="153" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964733" />
  <Command __id="155" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:06 EDT 2021" starttimestamp="1616620322155" timestamp="964765" />
  <Command __id="157" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:07 EDT 2021" starttimestamp="1616620322155" timestamp="964885" />
  <Command __id="159" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 24 17:28:07 EDT 2021" starttimestamp="1616620322155" timestamp="965082" />
  <Command __id="161" _type="InsertStringCommand" date="Wed Mar 24 17:28:07 EDT 2021" starttimestamp="1616620322155" timestamp="965749" timestamp2="965749">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="162" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Mar 24 17:28:07 EDT 2021" start_end="START" starttimestamp="1616620322155" timestamp="965751" />
  <Command __id="167" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Mar 24 17:28:10 EDT 2021" start_end="END" starttimestamp="1616620322155" timestamp="968203" />
  <Command __id="168" _type="InsertStringCommand" date="Wed Mar 24 17:28:10 EDT 2021" starttimestamp="1616620322155" timestamp="968205" timestamp2="968205">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="169" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 24 17:28:10 EDT 2021" starttimestamp="1616620322155" timestamp="968544" />
  <Command __id="170" _type="EclipseCommand" commandID="" date="Wed Mar 24 17:28:10 EDT 2021" starttimestamp="1616620322155" timestamp="968691" />
  <Command __id="171" _type="EclipseCommand" commandID="" date="Wed Mar 24 17:28:10 EDT 2021" starttimestamp="1616620322155" timestamp="968724" />
  <Command __id="172" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 24 17:28:11 EDT 2021" starttimestamp="1616620322155" timestamp="968927" />
  <Command __id="173" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 24 17:28:11 EDT 2021" starttimestamp="1616620322155" timestamp="969439" />
  <Command __id="174" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 24 17:28:11 EDT 2021" starttimestamp="1616620322155" timestamp="969473" />
  <Command __id="175" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 24 17:28:11 EDT 2021" starttimestamp="1616620322155" timestamp="969501" />
  <Command __id="176" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 24 17:28:11 EDT 2021" starttimestamp="1616620322155" timestamp="969532" />
  <Command __id="177" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 24 17:28:11 EDT 2021" starttimestamp="1616620322155" timestamp="969562" />
  <Command __id="178" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 24 17:28:11 EDT 2021" starttimestamp="1616620322155" timestamp="969593" />
  <Command __id="179" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 24 17:28:11 EDT 2021" starttimestamp="1616620322155" timestamp="969625" />
  <Command __id="180" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 24 17:28:11 EDT 2021" starttimestamp="1616620322155" timestamp="969671" />
  <Command __id="181" _type="ShellCommand" date="Wed Mar 24 17:28:15 EDT 2021" starttimestamp="1616620322155" timestamp="972897" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="182" _type="ShellCommand" date="Wed Mar 24 17:28:15 EDT 2021" starttimestamp="1616620322155" timestamp="972996" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="185" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 24 17:28:15 EDT 2021" starttimestamp="1616620322155" timestamp="973312" />
  <Command __id="186" _type="EclipseCommand" commandID="" date="Wed Mar 24 17:28:15 EDT 2021" starttimestamp="1616620322155" timestamp="973409" />
  <Command __id="187" _type="EclipseCommand" commandID="" date="Wed Mar 24 17:28:15 EDT 2021" starttimestamp="1616620322155" timestamp="973443" />
  <Command __id="188" _type="MoveCaretCommand" caretOffset="364" date="Wed Mar 24 17:28:17 EDT 2021" docOffset="641" starttimestamp="1616620322155" timestamp="974955" />
  <Command __id="189" _type="SelectTextCommand" caretOffset="453" date="Wed Mar 24 17:28:18 EDT 2021" end="459" start="453" starttimestamp="1616620322155" timestamp="976593" />
  <Command __id="190" _type="ShellCommand" date="Wed Mar 24 17:28:20 EDT 2021" starttimestamp="1616620322155" timestamp="978599" type="ECLIPSE_LOST_FOCUS" />
</Events>
